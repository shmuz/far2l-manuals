<header>
tag=SMZ1
ver=2.7
</header>
<node>
id=91
lv=0
dt=Text
nm=Manual of LuaFAR 2L
mtime=3866072335
<article>
#_<markdown>
#_## This manual describes the LuaFAR variant intended for work with [far2l](https://github.com/shmuz/far2l) (Linux fork of FAR Manager v2).
#_
#_### Brief description of LuaFAR package
#_
#_This package allows writing Far Manager plugins in
#_[Lua](https://www.lua.org/) 5.1 programming language.
#_The package provides source code for `luafar2l.so` (a library)
#_and `luaplug` (generic plugin).
#_`luafar2l.so` is a runtime library used by a single or multiple plugins.
#_
#_* The functions exported by the plugin should be named in Lua as following,
#_e.g., the function `OpenPluginW` should be named [`export.OpenPlugin`](109.html)
#_in the Lua program, see the full list [here](92.html).
#_ 
#_* The service functions provided by Far Manager are found in the global Lua tables
#_`far`, `editor`, `panel`, `viewer`, `regex`.
#_For instance, function `EditorControl` with parameter `ECTL_GETINFO`
#_is named [`editor.GetInfo`](29.html) in Lua plugins.
#_
#_* **Note:** the functions of the LuaFAR library assume
#_string arguments and string return values to be in the **UTF-8**
#_encoding (unless they are meant to hold binary data).
#_
#_Currently, the documentation on LuaFAR API is incomplete and may be somewhat inaccurate. When in doubt, consult the source code. The API may change in the future.
#_ 
#_One instance of `luafar2l.so` can "serve" arbitrary number of LuaFAR plugins at the same time. An example of the C-part of a LuaFAR plugin is `luaplug.c` (included in this package).
#_ 
#_The starting (or "default") Lua script is searched in the plugin's DLL directory in the following order (see [`LF_RunDefaultScript`](130.html) for details):
#_
#_1. The plugin name with the extension `.lua` is looked for, e.g.: `luaplug.far-plug-wide -> luaplug.lua`
#_2. If the plugin name contains hyphens, then its part preceding the last hyphen is looked for, e.g.: `luaplug-x64.far-plug-wide -> luaplug.lua`.
#_
#_
#_
#_
#_
#_
#_
#_
#_
</article>
</node>
<node>
id=329
lv=1
dt=Text
nm=Flags
ctime=3480257526
mtime=3853580040
<article>
#_<markdown>
#_
#_As Far API makes wide use of named integer constants, there is
#_a necessity to represent those constants in Lua. LuaFAR
#_keeps the names and values of the constants in tables.
#_Most constants are embedded into LuaFAR (in a table
#_[`far.Flags`](57.html)).
#_
#_This manual uses the term **flag** for a single named constant
#_and the term **flags combination** for the bitwise OR of one or
#_more such constants.
#_
#_When some function parameter in this manual is denoted as *flag*,
#_it can be supplied from Lua as either an integer, or as a string.
#_
#_When some function parameter in this manual is denoted as *flag
#_combination*, it can be supplied from Lua as either an integer,
#_a string (when a combination consists of one flag), or a table,
#_with keys corresponding to constants' names and having non-false
#_values.
#_
#_#### Example 1 (single flag)
#_The following 2 calls are equivalent:
#_        (1)  editor.UndoRedo(F.EUR_UNDO) -- where F=far.Flags
#_        (2)  editor.UndoRedo("EUR_UNDO")
#_
#_#### Example 2 (flags combination)
#_The 7-th parameter to function [`editor.Editor`](21.html) can be
#_supplied from Lua in the following equivalent forms:
#_        (1)  bit.bor(F.EF_NONMODAL, F.EF_IMMEDIATERETURN, ....)
#_        (2)  { EF_NONMODAL=1, EF_IMMEDIATERETURN=1, .... }
#_
#_
</article>
</node>
<node>
id=336
lv=1
dt=Text
nm=Unicode support
ctime=3480525243
mtime=3866283394
<article>
#_<markdown>
#_
#_### Passing string arguments and returning string values
#_
#_Most functions of the LuaFAR library assume string
#_arguments and string return values to be in the **UTF-8**
#_encoding (unless they are meant to hold binary data).
#_
</article>
</node>
<node>
id=214
lv=1
dt=Text
nm=Generic LuaFAR plugin
mtime=3853669600
<article>
#_<markdown>
#_
#_The LuaFAR distribution has a **`luaplug.c`** file that is not involved in building the LuaFAR DLL. It's called "generic LuaFAR plugin". Since most of the functionality of LuaFAR plugins is contained in their Lua parts, their C parts are more or less the same for most LuaFAR plugins. **`luaplug.c`** is a working example of this C-part and can be used by plugin developers.
#_
#_- [Customizing the generic plugin](425.html)
#_- [Extra exported functions](426.html)
#_
</article>
</node>
<node>
id=425
lv=2
dt=Text
nm=Customizing the generic plugin
ctime=3851409449
mtime=3866283742
<article>
#_<markdown>
#_
#_<a name="customizing"></a>
#_### Customizing the generic plugin
#_The easiest way to build a LuaFAR plugin DLL is via `plugin.mak`
#_makefile. This makefile should be included in another makefile.
#_It accepts the following parameters:
#_
#_- **`PLUGNAME`** - name of the plugin, e.g.:<br>
#_  `PLUGNAME = hello`<br>
#_  will result in `hello.far-plug-wide` DLL.
#_
#_- **`SYS_ID`** - the plugin's identifier, a 32-bit unsigned integer.
#_
#_- **`FAR_EXPORTS`** - list of functions that should be exported by the plugin
#_(in uppercase, whitespace-separated), e.g.:<br>
#_  `FAR_EXPORTS = OPENPLUGIN EXITFAR`<br>
#_(The functions *SetStartupInfoW*, *GetGlobalInfoW*, *GetPluginInfoW* and *ProcessSynchroEventW*
#_are always exported, so there's no need to include them in the list.)
#_
#_- **`MINFARVERSION`** - the minimum FAR version to be accepted by the plugin, e.g.:<br>
#_  `MINFARVERSION = 2,0`<br>
#_(This setting is used only if `FAR_EXPORTS` includes `GETMINFARVERSION`.)
#_
#_@@@
#_
</article>
</node>
<node>
id=487
lv=2
dt=Text
nm=luafar_init.lua
ctime=3867668999
mtime=3867670115
<article>
#_<markdown>
#_
#_If the file `Plugins/luafar/luafar_init.lua` exists it is executed before the first run of
#_the plugin's default script.<br>
#_It is **not** executed when the default script is reloaded due to `far.ReloadDefaultScript == true`.
#_
#_See also:<br>
#_[`LF_RunDefaultScript`](130.html)<br>
#_[`LF_OpenPlugin`](173.html)<br>
#_
#_@@@
#_
</article>
</node>
<node>
id=426
lv=2
dt=Text
nm=Extra exported functions
ctime=3851409469
mtime=3866304282
<article>
#_<markdown>
#_
#_<a name="luaopen_luaplug"></a>
#_### Extra exported function: `luaopen_luaplug`
#_Some libraries (e.g. `rings`) can create additional `lua_State` instances from Lua scripts. To initialize those instances with libraries included in LuaFAR (`far`, `panel`, `editor`, etc.), call `luaopen_luaplug`. The function must be loaded via `package.loadlib`. Internally, it calls [`LF_InitOtherLuaState`](385.html).
#_
#_**Example:**
#_      local rings = require "rings"
#_      local r1 = rings.new()
#_      r1:dostring([[
#_        local modname = ...
#_        assert(package.loadlib(modname, "luaopen_luaplug"))()
#_        far.Message ("Hello world", "Called from a ring")
#_      ]], far.PluginStartupInfo().ModuleName)
#_
#_
</article>
</node>
<node>
id=92
lv=0
dt=Text
nm=LuaFAR plugin-exported functions
<article>
</article>
</node>
<node>
id=122
lv=1
dt=Text
nm=Common functions
<article>
</article>
</node>
<node>
id=96
lv=2
dt=Text
nm=export.Configure
<article>
#_result = export.Configure (ItemNumber)
#_
#_**Parameters:**
#_  ItemNumber: integer
#_
#_**Returns:**
#_  result:     boolean
#_
#_@@@
#_
</article>
</node>
<node>
id=98
lv=2
dt=Text
nm=export.ExitFAR
<article>
#_export.ExitFAR()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  nothing
#_
#_@@@
#_
</article>
</node>
<node>
id=105
lv=2
dt=Text
nm=export.GetPluginInfo
mtime=3866020707
<article>
#_PluginInfo = export.GetPluginInfo ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  PluginInfo: table
#_    fields of PluginInfo:
#_      Flags:               integer
#_      DiskMenuStrings:     table (array of strings)
#_      PluginMenuStrings:   table (array of strings)
#_      PluginConfigStrings: table (array of strings)
#_      CommandPrefix:       string
#_
#_@@@
#_
</article>
</node>
<node>
id=447
lv=2
dt=Text
nm=export.MayExitFAR
ctime=3852492345
mtime=3852492415
<article>
#_result = export.MayExitFAR()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result:  boolean
#_
#_@@@
#_
</article>
</node>
<node>
id=109
lv=2
dt=Text
nm=export.OpenPlugin
mtime=3867586029
<article>
#_object = export.OpenPlugin (OpenFrom, Item)
#_
#_**Definitions:**
#_  **"int64"**
#_    Type of userdata, produced by `bit64` library.
#_  **"binary"**
#_    By convention, it is a string enclosed in a table as its first element.
#_    The string is intended to be passed to and from without conversions UTF-8 <-> UTF-32LE.
#_  **"panel"**
#_    By convention, it is a panel handle (any non-false Lua value) enclosed in a table
#_    as its first element. The table must contain the field ["type"]="panel".
#_
#_**Parameters:**
#_  OpenFrom: integer
#_  Item:
#_    - If OpenFrom == OPEN_FROMMACRO:
#_        table (array of arguments):
#_        - each argument can be either of:
#_          string, nil, boolean, number, "int64", or "binary"
#_        - field *n* of the table holds the length of the array
#_    - else:
#_        string (if OpenFrom is OPEN_SHORTCUT or OPEN_COMMANDLINE)
#_        table  (if OpenFrom is OPEN_DIALOG)
#_          ItemNumber : integer
#_          hDlg       : userdata
#_        integer (for other cases of OpenFrom)
#_
#_**Returns:**
#_  if OpenFrom == OPEN_FROMMACRO:
#_    0 or more Lua values.
#_    Currently, values of the following types are supported:
#_        string, nil, boolean, number, "int64", "binary", or "panel".
#_    To open a panel, return a "panel" value as the first return value.
#_  else:
#_    object: plugin object (any Lua value)
#_      - Nil and false result in returning INVALID_HANDLE_VALUE to FAR.
#_      - Number 0 (zero) tells Far to unload the plugin.
#_      - The plugin object is passed to other exported functions
#_        when they are called by Far.
#_
#_@@@
#_<lua> Links = { bit64="471.html" } </lua>
#_
</article>
</node>
<node>
id=485
lv=2
dt=Text
nm=export.ProcessConsoleInput
ctime=3866071840
mtime=3866074560
<article>
#_result = export.ProcessConsoleInput (Rec)
#_
#_**Parameters:**
#_  Rec:   table InputRecord
#_
#_**Returns:**
#_  result: 0, 1, or table InputRecord
#_    **Details:**
#_    - 0/nil/nothing results in returning 0 to FAR ("continue processing")
#_    - 1/true results in returning 1 to FAR ("stop processing")
#_    - a table results in returning 2 to FAR ("*Rec* was changed");
#_      this table is converted to an INPUT_RECORD which is also passed to FAR.
#_
#_**Far API used:**
#_  ProcessConsoleInputW
#_
#_@@@
#_<lua> Links = { InputRecord="187.html" } </lua>
#_
</article>
</node>
<node>
id=123
lv=1
dt=Text
nm=Panel functions
<article>
</article>
</node>
<node>
id=94
lv=2
dt=Text
nm=export.ClosePlugin
<article>
#_export.ClosePlugin (object, handle)
#_
#_**Parameters:**
#_  object: plugin object
#_  handle: plugin handle
#_
#_**Returns:**
#_  nothing
#_
#_@@@
#_
</article>
</node>
<node>
id=95
lv=2
dt=Text
nm=export.Compare
<article>
#_result = export.Compare (object, handle, PanelItem1, PanelItem2, Mode)
#_
#_**Parameters:**
#_  object:     plugin object
#_  handle:     plugin handle
#_  PanelItem1: table PluginPanelItem
#_  PanelItem2: table PluginPanelItem
#_  Mode:       integer
#_
#_**Returns:**
#_  result:     integer
#_
#_@@@
#_<lua> Links = { PluginPanelItem="85.html" } </lua>
#_
#_
</article>
</node>
<node>
id=97
lv=2
dt=Text
nm=export.DeleteFiles
<article>
#_result = export.DeleteFiles (object, handle, PanelItems, OpMode)
#_
#_**Parameters:**
#_  object:     plugin object
#_  handle:     plugin handle
#_  PanelItems: table (array of PluginPanelItem)
#_  OpMode:     integer
#_
#_**Returns:**
#_  result:     boolean
#_
#_@@@
#_<lua> Links = { PluginPanelItem="85.html" } </lua>
#_
#_
</article>
</node>
<node>
id=365
lv=2
dt=Text
nm=export.FreeCustomData
ctime=3485765946
mtime=3485765967
<article>
#_**This function is not called by LuaFAR**
#_
#_@@@
#_
</article>
</node>
<node>
id=99
lv=2
dt=Text
nm=export.FreeFindData
<article>
#_**This function is not called by LuaFAR**
#_
#_@@@
#_
</article>
</node>
<node>
id=100
lv=2
dt=Text
nm=export.FreeVirtualFindData
<article>
#_**This function is not called by LuaFAR**
#_
#_@@@
#_
</article>
</node>
<node>
id=364
lv=2
dt=Text
nm=export.GetCustomData
ctime=3485765841
mtime=3485773753
<article>
#_Data = export.GetCustomData (FilePath)
#_
#_**Parameters:**
#_  FilePath:   string
#_
#_**Returns:**
#_  Data:       string, or nil
#_
#_**WARNING:**
#_  As of time of this writing, this function exploits an experimental
#_  feature of Far, introduced in Far 2.0 build 1588.
#_
#_@@@
#_
</article>
</node>
<node>
id=101
lv=2
dt=Text
nm=export.GetFiles
<article>
#_result = export.GetFiles (object, handle, PanelItems, Move,
#_                       DestPath, OpMode)
#_
#_**Parameters:**
#_  object:     plugin object
#_  handle:     plugin handle
#_  PanelItems: table (array of PluginPanelItem)
#_  Move:       boolean
#_  DestPath:   string
#_  OpMode:     integer
#_
#_**Returns:**
#_  result:     integer
#_
#_@@@
#_<lua> Links = { PluginPanelItem="85.html" } </lua>
#_
#_
</article>
</node>
<node>
id=102
lv=2
dt=Text
nm=export.GetFindData
<article>
#_Items = export.GetFindData (object, handle, OpMode)
#_
#_**Parameters:**
#_  object:  plugin object
#_  handle:  plugin handle
#_  OpMode:  integer
#_
#_**Returns:**
#_  Items:   table (array of PluginPanelItem)
#_
#_@@@
#_<lua>
#_Links = { PluginPanelItem="85.html" }
#_</lua>
#_
#_
</article>
</node>
<node>
id=104
lv=2
dt=Text
nm=export.GetOpenPluginInfo
mtime=3853777018
<article>
#_OpenPluginInfo = export.GetOpenPluginInfo (object, handle)
#_
#_**Parameters:**
#_  object: plugin object
#_  handle: plugin handle
#_
#_**Returns:**
#_  OpenPluginInfo: table
#_    fields of OpenPluginInfo:
#_      Flags:            integer
#_      HostFile:         string
#_      CurDir:           string
#_      Format:           string
#_      PanelTitle:       string
#_      InfoLines:        table (array of InfoLine tables)
#_      InfoLinesNumber:  integer
#_      DescrFiles:       table (array of strings)
#_      PanelModesArray:  table (array of PanelMode tables)
#_      PanelModesNumber: integer
#_      StartPanelMode:   integer
#_      StartSortMode:    flag
#_      StartSortOrder:   integer
#_
#_@@@
#_<lua> Links = { InfoLine="120.html", PanelMode="121.html" } </lua>
#_
#_
</article>
</node>
<node>
id=106
lv=2
dt=Text
nm=export.GetVirtualFindData
<article>
#_Items = export.GetVirtualFindData (object, handle, Path)
#_
#_**Parameters:**
#_  object:  plugin object
#_  handle:  plugin handle
#_  Path:    string
#_
#_**Returns:**
#_  Items:   table (array of PluginPanelItem)
#_
#_@@@
#_<lua> Links = { PluginPanelItem="85.html" } </lua>
#_
#_
</article>
</node>
<node>
id=107
lv=2
dt=Text
nm=export.MakeDirectory
<article>
#_Status [, NewName] = export.MakeDirectory (object, handle, Name, OpMode)
#_
#_**Parameters:**
#_  object:  plugin object
#_  handle:  plugin handle
#_  Name:    string
#_  OpMode:  integer
#_
#_**Returns:**
#_  Status:  integer (in accordance with FAR API)
#_  NewName: string
#_
#_@@@
#_
</article>
</node>
<node>
id=108
lv=2
dt=Text
nm=export.OpenFilePlugin
mtime=3480348469
<article>
#_object = export.OpenFilePlugin (Name, Data, OpMode)
#_
#_**Parameters:**
#_  Name:   string, or nil
#_  Data:   string, or nil
#_  OpMode: integer
#_
#_**Returns:**
#_  object: plugin object (any Lua value)
#_    - Nil and false result in returning INVALID_HANDLE_VALUE to Far.
#_    - Number -2 (minus 2) tells Far that the operation was interrupted
#_      by the user.
#_    - The plugin object is passed to other exported functions
#_      when they are called by Far.
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=112
lv=2
dt=Text
nm=export.ProcessEvent
<article>
#_result = export.ProcessEvent (object, handle, Event, Param)
#_
#_**Parameters:**
#_  object: plugin object
#_  handle: plugin handle
#_  Event:  integer
#_  Param:  string, or nil
#_
#_**Returns:**
#_  result: boolean
#_
#_@@@
#_
</article>
</node>
<node>
id=113
lv=2
dt=Text
nm=export.ProcessHostFile
<article>
#_result = export.ProcessHostFile (object, handle, Items, OpMode)
#_
#_**Parameters:**
#_  object: plugin object
#_  handle: plugin handle
#_  Items:  table (array of PluginPanelItem)
#_  OpMode: integer
#_
#_**Returns:**
#_  result: boolean
#_
#_@@@
#_<lua> Links = { PluginPanelItem="85.html" } </lua>
#_
#_
</article>
</node>
<node>
id=114
lv=2
dt=Text
nm=export.ProcessKey
mtime=3480360622
<article>
#_result = export.ProcessKey (object, handle, Key, ControlState)
#_
#_**Parameters:**
#_  object:       plugin object
#_  handle:       plugin handle
#_  Key:          integer
#_  ControlState: integer
#_
#_**Returns:**
#_  result:       boolean
#_
#_@@@
#_
</article>
</node>
<node>
id=115
lv=2
dt=Text
nm=export.PutFiles
<article>
#_result = export.PutFiles (object, handle, Items, Move, OpMode)
#_
#_**Parameters:**
#_  object: plugin object
#_  handle: plugin handle
#_  Items:  table (array of PluginPanelItem)
#_  Move:   boolean
#_  OpMode: integer
#_
#_**Returns:**
#_  result: integer
#_
#_@@@
#_<lua> Links = { PluginPanelItem="85.html" } </lua>
#_
#_
</article>
</node>
<node>
id=116
lv=2
dt=Text
nm=export.SetDirectory
<article>
#_result = export.SetDirectory (object, handle, Dir, OpMode)
#_
#_**Parameters:**
#_  object: plugin object
#_  handle: plugin handle
#_  Dir:    string
#_  OpMode: integer
#_
#_**Returns:**
#_  result: boolean
#_
#_@@@
#_
</article>
</node>
<node>
id=117
lv=2
dt=Text
nm=export.SetFindList
<article>
#_result = export.SetFindList (object, handle, Items)
#_
#_**Parameters:**
#_  object: plugin object
#_  handle: plugin handle
#_  Items:  table (array of PluginPanelItem)
#_
#_**Returns:**
#_  result: boolean
#_
#_@@@
#_<lua> Links = { PluginPanelItem="85.html" } </lua>
#_
#_
</article>
</node>
<node>
id=124
lv=1
dt=Text
nm=Editor functions
<article>
</article>
</node>
<node>
id=110
lv=2
dt=Text
nm=export.ProcessEditorEvent
mtime=3862213220
<article>
#_result = export.ProcessEditorEvent (EditorID, Event, Param)
#_
#_**Parameters:**
#_  EditorID: integer
#_  Event:    integer
#_  Param:    integer, or nil
#_
#_**Returns:**
#_  result: integer
#_
#_@@@
#_
</article>
</node>
<node>
id=111
lv=2
dt=Text
nm=export.ProcessEditorInput
mtime=3851626638
<article>
#_result = export.ProcessEditorInput (Rec)
#_
#_**Parameters:**
#_  Rec: table
#_    fields of Rec:
#_      EventType:         integer
#_
#_      *--if EventType is KEY_EVENT or FARMACRO_KEY_EVENT:*
#_      KeyDown:           boolean
#_      RepeatCount:       integer
#_      VirtualKeyCode:    integer
#_      VirtualScanCode:   integer
#_      UnicodeChar:       string
#_      ControlKeyState:   integer
#_
#_      *--if EventType is MOUSE_EVENT:*
#_      MousePositionX     integer
#_      MousePositionY     integer
#_      ButtonState        integer
#_      ControlKeyState    integer
#_      EventFlags         integer
#_
#_      *--if EventType is WINDOW_BUFFER_SIZE_EVENT:*
#_      SizeX              integer
#_      SizeY              integer
#_
#_      *--if EventType is MENU_EVENT:*
#_      CommandId          integer
#_
#_      *--if EventType is FOCUS_EVENT:*
#_      SetFocus           boolean
#_
#_**Returns:**
#_  result: boolean
#_
#_@@@
#_
</article>
</node>
<node>
id=125
lv=1
dt=Text
nm=Viewer functions
<article>
</article>
</node>
<node>
id=127
lv=2
dt=Text
nm=export.ProcessViewerEvent
mtime=3862213275
<article>
#_result = export.ProcessViewerEvent (ViewerID, Event, Param)
#_
#_**Parameters:**
#_  ViewerID: integer
#_  Event:    integer
#_  Param:    integer, or nil
#_
#_**Returns:**
#_  result: integer
#_
#_@@@
#_
</article>
</node>
<node>
id=220
lv=1
dt=Text
nm=Dialog functions
<article>
</article>
</node>
<node>
id=221
lv=2
dt=Text
nm=export.ProcessDialogEvent
mtime=3853171450
<article>
#_ret = export.ProcessDialogEvent (Event, Param)
#_
#_**Parameters:**
#_  Event:  integer
#_  Param:  table *tFarDialogEvent*
#_            hDlg   : userdata
#_            Msg    : integer
#_            Param1 : integer
#_            Param2 : depends on *Msg*
#_
#_**Returns:**
#_  ret:    integer, or nil
#_
#_**Description:**
#_  If *ret* is *nil* or *false*, then the event processing will continue.
#_  Otherwise, it is assumed that the plugin has processed the event, and *ret*
#_  will then be used as the return value of the dialog event handler.
#_
#_**Far API used:**
#_  ProcessDialogEventW, FarDialogEvent
#_
#_@@@
#_
</article>
</node>
<node>
id=151
lv=1
dt=Text
nm=Other functions
<article>
</article>
</node>
<node>
id=150
lv=2
dt=Text
nm=export.OnError
mtime=3851366615
<article>
#_export.OnError (ErrorMsg)
#_
#_**Parameters:**
#_  ErrorMsg: any type, usually a string
#_
#_**Returns:**
#_  nothing
#_
#_**Description:**
#_  This is a user-defined hook into LuaFAR.
#_  If this function is defined by a user application, then,
#_  instead of displaying an error message box, LuaFAR calls
#_  this function, passing it the error message value.
#_  The return values of export.OnError (if any) are ignored.
#_
#_
</article>
</node>
<node>
id=486
lv=1
dt=Text
nm=C-functions
ctime=3866132436
mtime=3870956917
<article>
</article>
</node>
<node>
id=467
lv=2
dt=Text
nm=GetGlobalInfoW
ctime=3861011876
mtime=3877053584
<article>
#_<markdown>
#_`void GetGlobalInfoW(struct GlobalInfo *Info)`
#_
#_### Description:
#_  The function sets `Info->SysID` (the plugin's identifier; a 32-bit unsigned int)
#_
#_### Notes:
#_  1. `GetGlobalInfoW` is supported only with a modified Far2L version.
#_     Plugins are not required to export this function.
#_  1. If the generic LuaFAR plugin (*luaplug.c*) is used then `GetGlobalInfoW`
#_     is exported and `SYS_ID` value must be defined as a compilation flag.
#_  1. `GetGlobalInfoW` is called by Far prior to [`SetStartupInfoW()`](118.html)
#_     and Far Manager fills the `Private` field of `StartupInfo` struct
#_     if `SysID` identifies one of the "known plugins".
#_
#_@@@
#_
</article>
</node>
<node>
id=103
lv=2
dt=Text
nm=GetMinFarVersionW
mtime=3866133117
<article>
#_int GetMinFarVersionW()
#_
</article>
</node>
<node>
id=319
lv=2
dt=Text
nm=ProcessSynchroEventW
ctime=3480185395
mtime=3866134386
<article>
#_int ProcessSynchroEventW (int Event, void *Param)
#_
#_This function is always exported by LuaFAR plugins.
#_It is used internally by LuaFAR in far.Timer implementation.
#_
#_@@@
#_<lua> Links = {
#_  ["far.Timer"]="346.html";
#_} </lua>
#_
</article>
</node>
<node>
id=118
lv=2
dt=Text
nm=SetStartupInfoW
mtime=3866133413
<article>
#_<markdown>
#_
#_    void SetStartupInfoW (const struct PluginStartupInfo *Info)
#_
#_The C-language part of a plugin must export this function.
#_Within this function, it should call the following
#_LuaFAR functions: [`LF_LuaOpen`](129.html) and
#_[`LF_RunDefaultScript`](130.html).
#_
#_@@@
#_
</article>
</node>
<node>
id=131
lv=0
dt=Text
nm=LuaFAR Far libraries
<article>
</article>
</node>
<node>
id=78
lv=1
dt=Text
nm=Common functions
<article>
</article>
</node>
<node>
id=153
lv=2
dt=Text
nm=far.AdvControl
mtime=3862853420
<article>
#_Result = far.AdvControl (Command, Param [, Param2])
#_
#_**Parameters:**
#_  Command:  flag (integer or string)
#_  Param:    *(depends on Command)*
#_
#_**Returns:**
#_  Result:   *(depends on Command)*
#_
#_**Details:**
#_
#_@ACTL_GETFARHWND
#_    Param:   none
#_    Result:  light userdata
#_
#_@ACTL_GETCONFIRMATIONS,
#_@ACTL_GETDESCSETTINGS,
#_@ACTL_GETDIALOGSETTINGS,
#_@ACTL_GETINTERFACESETTINGS,
#_@ACTL_GETPANELSETTINGS,
#_@ACTL_GETPLUGINMAXREADDATA,
#_@ACTL_GETSYSTEMSETTINGS,
#_@ACTL_GETWINDOWCOUNT:
#_    Param:   none
#_    Result:  integer
#_
#_@ACTL_COMMIT,
#_@ACTL_PROGRESSNOTIFY,
#_@ACTL_QUIT,
#_@ACTL_REDRAWALL:
#_    Param:   none
#_    Result:  boolean
#_
#_@ACTL_GETCOLOR:
#_    Param:   flag
#_    Result:  integer or nil
#_
#_@ACTL_SETCURRENTWINDOW:
#_    Param:   integer (1-based)
#_    Param2:  boolean (if true then ACTL_COMMIT is called after ACTL_SETCURRENTWINDOW)
#_    Result:  boolean
#_
#_@ACTL_WAITKEY:
#_    Param:   flag (optional; default=0)
#_    Result:  integer
#_
#_@ACTL_GETSYSWORDDIV:
#_    Param:   none
#_    Result:  string
#_    
#_@ACTL_EJECTMEDIA:
#_    Param:   table (see its fields below)
#_        Letter:  string (only the first character matters)
#_        Flags:   flags combination
#_    Result:  boolean
#_
#_@ACTL_KEYMACRO: not supported, replaced by Macro Control functions
#_
#_@ACTL_SYNCHRO: not supported as it is used internally in far.Timer
#_
#_@ACTL_GETARRAYCOLOR:
#_    Param:   none
#_    Result:  table (array of integers)
#_
#_@ACTL_GETFARVERSION:
#_    Param:   boolean (optional)
#_    Result:  string (e.g. "2.4"), if Param==false;
#_             2 numbers (e.g. 2,4), if Param==true;
#_
#_@ACTL_GETWINDOWINFO:
#_    Param1:  window number; 1-based integer (optional; default=0)
#_    Result:  table (see its fields below), or nil
#_        Type:      integer
#_        Pos:       integer (1-based)
#_        Modified:  boolean
#_        Current:   boolean
#_        TypeName:  string
#_        Name:      string
#_
#_@ACTL_GETSHORTWINDOWINFO:
#_    Param1:  window number; 1-based integer (optional; default=0)
#_    Result:  table (see its fields below), or nil
#_        Type:      integer
#_        Pos:       integer (1-based)
#_        Modified:  boolean
#_        Current:   boolean
#_
#_@ACTL_SETARRAYCOLOR:
#_    Param:   table (see its fields below;
#_             its array part contains integers)
#_        Flags:       flags combination
#_        StartIndex:  integer
#_    Result:  boolean
#_
#_@ACTL_SETPROGRESSSTATE:
#_    Param:   flag
#_    Result:  boolean
#_
#_@ACTL_SETPROGRESSVALUE:
#_    Param:   table (see its fields below)
#_        Completed, Total:  numbers
#_    Result:  boolean
#_
#_@ACTL_GETFARRECT:
#_    Param:   none
#_    Result:  table (see its fields below), or nil
#_        Left, Top, Right, Bottom: integers
#_
#_@ACTL_GETCURSORPOS:
#_    Param:   none
#_    Result:  table (see its fields below), or nil
#_        X, Y: integers
#_
#_@ACTL_SETCURSORPOS:
#_    Param:   table (see its fields below)
#_        X, Y: integers
#_    Result:  boolean
#_
#_**Far API used:**
#_  AdvControl
#_
#_@@@
#_<lua> Links = { MacroControl="428.html", } </lua>
#_
#_
</article>
</node>
<node>
id=463
lv=3
dt=Text
nm=actl namespace
ctime=3853931289
mtime=3861339714
<article>
#_There is an alternative interface to FAR's advanced control commands.
#_It is shorter and more expressive, e.g. the following 2 calls do the
#_same thing:
#_    1) info = far.AdvControl("ACTL_GETWINDOWINFO", 2)
#_    2) info = actl.GetWindowInfo(2)
#_
#_**actl** is a global table containing those alternative functions.
#_Below is a table of correspondence between **ACTL_** messages
#_and functions from the **actl** table:
#_
#_  Commit                  ACTL_COMMIT
#_  EjectMedia              ACTL_EJECTMEDIA
#_  GetArrayColor           ACTL_GETARRAYCOLOR
#_  GetColor                ACTL_GETCOLOR
#_  GetConfirmations        ACTL_GETCONFIRMATIONS
#_  GetCursorPos            ACTL_GETCURSORPOS
#_  GetDescSettings         ACTL_GETDESCSETTINGS
#_  GetDialogSettings       ACTL_GETDIALOGSETTINGS
#_  GetFarHwnd              ACTL_GETFARHWND
#_  GetFarRect              ACTL_GETFARRECT
#_  GetFarVersion           ACTL_GETFARVERSION
#_  GetInterfaceSettings    ACTL_GETINTERFACESETTINGS
#_  GetPanelSettings        ACTL_GETPANELSETTINGS
#_  GetPluginMaxReadData    ACTL_GETPLUGINMAXREADDATA
#_  GetShortWindowInfo      ACTL_GETSHORTWINDOWINFO
#_  GetSystemSettings       ACTL_GETSYSTEMSETTINGS
#_  GetSysWordDiv           ACTL_GETSYSWORDDIV
#_  GetWindowCount          ACTL_GETWINDOWCOUNT
#_  GetWindowInfo           ACTL_GETWINDOWINFO
#_  ProgressNotify          ACTL_PROGRESSNOTIFY
#_  Quit                    ACTL_QUIT
#_  RedrawAll               ACTL_REDRAWALL
#_  SetArrayColor           ACTL_SETARRAYCOLOR
#_  SetCurrentWindow        ACTL_SETCURRENTWINDOW
#_  SetCursorPos            ACTL_SETCURSORPOS
#_  SetProgressState        ACTL_SETPROGRESSSTATE
#_  SetProgressValue        ACTL_SETPROGRESSVALUE
#_  WaitKey                 ACTL_WAITKEY
#_
#_@@@
#_<lua> Links = { ["far.SendDlgMessage"]="71.html"; } </lua>
#_
</article>
</node>
<node>
id=53
lv=2
dt=Text
nm=far.GetDirList
mtime=3478185727
<article>
#_list = far.GetDirList (dir)
#_
#_**Parameters:**
#_  dir:  string
#_
#_**Returns:**
#_  list: array of FindData tables, or nil
#_
#_**Far API used:**
#_  GetDirList, FreeDirList
#_
#_
#_@@@
#_<lua> Links = { FindData="90.html" } </lua>
#_
</article>
</node>
<node>
id=58
lv=2
dt=Text
nm=far.GetMsg
<article>
#_msg = far.GetMsg (MsgId)
#_
#_**Parameters:**
#_  MsgId: integer
#_
#_**Returns:**
#_  msg: string
#_
#_**Far API used:**
#_  GetMsg
#_
#_@@@
#_
</article>
</node>
<node>
id=60
lv=2
dt=Text
nm=far.GetPluginDirList
mtime=3499742206
<article>
#_list = far.GetPluginDirList (PluginNumber, handle, Dir)
#_
#_**Parameters:**
#_  PluginNumber: integer
#_  handle:       plugin handle, or nil
#_  Dir:          string
#_
#_**Returns:**
#_  list:         array of PluginPanelItem
#_
#_**Far API used:**
#_  GetPluginDirList, FreePluginDirList
#_
#_@@@
#_<lua> Links = { PluginPanelItem="85.html" } </lua>
#_
</article>
</node>
<node>
id=64
lv=2
dt=Text
nm=far.Menu
mtime=3852562033
<article>
#_Item, Position = far.Menu (Properties, Items [, BreakKeys])
#_
#_**Parameters:**
#_  Properties: table
#_    fields of Properties (every field is optional):
#_      X:            integer
#_      Y:            integer
#_      MaxHeight:    integer
#_      Flags:        flags combination
#_      Title:        string
#_      Bottom:       string
#_      HelpTopic:    string
#_      SelectIndex:  integer (1-based)
#_
#_  Items: table (array of menu items)
#_      a menu item is a table;
#_      fields of a menu item (every field is optional):
#_        text:         string
#_        checked:      boolean, or string
#_        separator:    boolean
#_        disable:      boolean
#_        grayed:       boolean
#_        hidden:       boolean
#_        selected:     boolean
#_        AccelKey:     integer
#_
#_  BreakKeys: table (array of break key items)
#_      a break key item is a table;
#_      fields of a break key item:
#_        BreakKey:     string
#_
#_**Returns:**
#_  Item:     table   (**chosen** item), or
#_            nil     (the menu was cancelled by the user)
#_
#_  Position: integer (position of the **selected** item), or
#_            nil     (the menu was cancelled by the user)
#_
#_**Notes:**
#_Properties.SelectIndex=N is equivalent to Items[N].selected=true
#_but it has a higher priority.
#_
#_The first return value (*Item*) should be used by the
#_program for performing the item-specific action. To do
#_so, the program can put some specific field(s) into
#_each element of *Items* and *BreakKeys* tables. For
#_example, such fields can be "action", "filename", etc.
#_
#_The second return value (*Position*) is the menu item that
#_was selected at the time of the menu closing. It can be used
#_to call the closed menu again in the same visible state.
#_
#_**Far API used:**
#_  Menu, FMENU_USEEXT
#_
#_@@@
#_
</article>
</node>
<node>
id=69
lv=2
dt=Text
nm=far.RestoreScreen
<article>
#_result = far.RestoreScreen (handle)
#_
#_**Parameters:**
#_  handle: light userdata
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  RestoreScreen
#_
#_@@@
#_
</article>
</node>
<node>
id=70
lv=2
dt=Text
nm=far.SaveScreen
<article>
#_handle = far.SaveScreen (X1, Y1, X2, Y2)
#_
#_**Parameters:**
#_  X1: integer, or nil
#_  Y1: integer, or nil
#_  X2: integer, or nil
#_  Y2: integer, or nil
#_
#_**Returns:**
#_  handle: light userdata
#_
#_**Far API used:**
#_  SaveScreen
#_
#_@@@
#_
</article>
</node>
<node>
id=74
lv=2
dt=Text
nm=far.ShowHelp
mtime=3480262815
<article>
#_result = far.ShowHelp (ModuleName, HelpTopic, Flags)
#_
#_**Parameters:**
#_  ModuleName: string
#_  HelpTopic:  string, or nil
#_  Flags:      flags combination
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  ShowHelp
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=76
lv=2
dt=Text
nm=far.Text
mtime=3853087975
<article>
#_far.Text (X, Y, Color, Str)
#_
#_**Parameters:**
#_  X:     integer
#_  Y:     integer
#_  Color: integer
#_  Str:   string, or nil (if nil, NULL is passed to Far)
#_
#_**Returns:**
#_  nothing
#_
#_**Note:**
#_  All parameters are optional.
#_  far.Text() is equivalent to far.Text(0,0,0x0F,nil).
#_
#_**Far API used:**
#_  Text
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=81
lv=1
dt=Text
nm=Dialog functions
<article>
</article>
</node>
<node>
id=479
lv=2
dt=Text
nm=far.ColorDialog
ctime=3862762502
mtime=3862762644
<article>
#_OutColor = far.ColorDialog (InColor, Transparent)
#_
#_**Parameters:**
#_  InColor:      integer (optional; default=0x0F)
#_  Transparent:  boolean (optional; default=false)
#_
#_**Returns:**
#_  OutColor:     integer, or nil
#_
#_**Far API used:**
#_  ColorDialog
#_
#_@@@
#_
</article>
</node>
<node>
id=438
lv=2
dt=Text
nm=far.CreateUserControl
ctime=3852117934
mtime=3852120740
<article>
#_<markdown>
#_Buffer support for `DI_USERCONTROL`. Use it like this:
#_
#_    local buffer=far.CreateUserControl(10,10)
#_    local textel={Char="a",Attributes=0x4C}
#_    for ii=1,#buffer do
#_      buffer[ii]=textel
#_    end
#_    local items={
#_      {"DI_DOUBLEBOX",   0,0,11,11, 0, 0,      0,0,""},
#_      {"DI_USERCONTROL", 1,1,10,10, 0, buffer, 0,0,""}
#_    }
#_    far.Dialog (-1,-1,12,12,nil,items)
#_
#_@@@
#_{di_usercontrol}: http://api.farmanager.com/ru/dialogapi/controls/di_usercontrol.html
#_
</article>
</node>
<node>
id=219
lv=2
dt=Text
nm=far.DefDlgProc
mtime=3492005369
<article>
#_result = far.DefDlgProc (hDlg, Msg, Param1, Param2)
#_
#_**Parameters:**
#_  hDlg   : userdata
#_  Msg    : flag
#_  Param1 : integer
#_  Param2 : integer
#_
#_**Returns:**
#_  result : integer 
#_
#_**Far API used:**
#_  DefDlgProc
#_
</article>
</node>
<node>
id=20
lv=2
dt=Text
nm=far.Dialog
mtime=3853813215
<article>
#_result = far.Dialog (X1,Y1,X2,Y2,HelpTopic,Items,Flags,DlgProc)
#_
#_**Parameters:**
#_  Same parameters as in far.DialogInit
#_
#_**Returns:**
#_  result: 1-based integer (or nil in case of failure)
#_
#_**Note:**
#_  The function updates the *Items* array to the values
#_  the dialog items have at the moment of dialog closing.
#_
#_**Far API used:**
#_  DialogInit, DialogRun, DialogFree
#_
#_@@@
#_<lua> Links = {
#_  FarDialogItem="295.html", ["far.DialogInit"]="378.html",
#_} </lua>
#_
#_
#_
</article>
</node>
<node>
id=380
lv=2
dt=Text
nm=far.DialogFree
ctime=3490426732
mtime=3490521200
<article>
#_far.DialogFree (handle)
#_
#_**Parameters:**
#_  handle: userdata (obtained from a far.DialogInit call)
#_
#_**Returns:**
#_  nothing
#_
#_**Note:**
#_  If *far.DialogFree* is never called by the program, the dialog
#_  handle will be eventually freed by the garbage collector.
#_
#_**Far API used:**
#_  DialogFree
#_
#_@@@
#_<lua> Links = { ["far.DialogInit"]="378.html" } </lua>
#_
</article>
</node>
<node>
id=378
lv=2
dt=Text
nm=far.DialogInit
ctime=3490426716
mtime=3853271662
<article>
#_hDlg = far.DialogInit (X1,Y1,X2,Y2,HelpTopic,Items,Flags,DlgProc)
#_
#_**Parameters:**
#_  X1:        integer
#_  Y1:        integer
#_  X2:        integer
#_  Y2:        integer
#_  HelpTopic: string, or nil
#_  Items:     table (array of FarDialogItem)
#_  Flags:     flags combination
#_  DlgProc:   function, or nil
#_    ret = DlgProc (hDlg, Msg, Param1, Param2)
#_      Parameters:
#_        hDlg   : userdata
#_        Msg    : integer
#_        Param1 : integer
#_        Param2 : depends on *Msg*
#_      Returns:
#_        ret    : depends on *Msg*
#_
#_**Returns:**
#_  hDlg:      userdata (or nil in case of failure)
#_
#_**Return value**
#_  The dialog handle returned by this function has the following methods:
#_  *__tostring*, *__gc*, *rawhandle* and *send*.
#_
#_  **hDlg:rawhandle()**
#_    returns the original value of handle received from Far Manager
#_    that is suitable for using with LuaJIT FFI and as a table key.
#_
#_  **hDlg:send(...)**
#_    is equivalent to `far.SendDlgMessage`(hDlg, ...)
#_
#_**Far API used:**
#_  DialogInit
#_
#_@@@
#_<lua> Links = { FarDialogItem="295.html" } </lua>
#_
#_
</article>
</node>
<node>
id=379
lv=2
dt=Text
nm=far.DialogRun
ctime=3490426724
mtime=3851925690
<article>
#_result = far.DialogRun (handle)
#_
#_**Parameters:**
#_  handle: userdata (obtained from a far.DialogInit call)
#_
#_**Returns:**
#_  result: integer (1-based)
#_
#_**Far API used:**
#_  DialogRun
#_
#_@@@
#_<lua> Links = { ["far.DialogInit"]="378.html" } </lua>
#_
</article>
</node>
<node>
id=62
lv=2
dt=Text
nm=far.InputBox
mtime=3488636579
<article>
#_result = far.InputBox (Title, Prompt, HistoryName, SrcText,
#_                       DestLength, HelpTopic, Flags)
#_
#_**Parameters:**
#_  Title:       string, or nil
#_  Prompt:      string, or nil
#_  HistoryName: string, or nil
#_  SrcText:     string, or nil
#_  DestLength:  integer, or nil
#_  HelpTopic:   string, or nil
#_  Flags:       integer, or nil
#_    (default = FIB_ENABLEEMPTY|FIB_BUTTONS|FIB_NOAMPERSAND)
#_
#_**Returns:**
#_  result: string, or nil
#_
#_**Far API used:**
#_  InputBox
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=65
lv=2
dt=Text
nm=far.Message
mtime=3853248148
<article>
#_result = far.Message (Msg, [Title], [Buttons], [Flags], [HelpTopic])
#_
#_**Parameters:**
#_  *Msg:*       any type (usually: string)
#_
#_  *Title:*     string
#_
#_  *Buttons:*   string
#_    - button captions are separated by semicolons
#_    - default value is one button "OK"
#_    - empty string means no buttons
#_    - if *Buttons* starts with a semicolon (;), then it must be
#_      one of the following predefined strings (case insensitive):
#_        ";Ok", ";OkCancel", ";AbortRetryIgnore", ";YesNo",
#_        ";YesNoCancel", ";RetryCancel".
#_
#_  *Flags:*     string
#_    it is checked if some predefined letters are present:
#_      'w' stands for FMSG_WARNING
#_      'e' stands for FMSG_ERRORTYPE
#_      'k' stands for FMSG_KEEPBACKGROUND
#_      'l' stands for FMSG_LEFTALIGN
#_      'n' stands for "no wrapping of long lines"
#_
#_  *HelpTopic:* string
#_
#_**Returns:**
#_  *result:* integer (1-based)
#_
#_**Note 1:**
#_  Before calling FAR function *Message*, the function:
#_    a) wraps long lines (unless the flag 'n' is present), and
#_    b) limits the maximal number of lines and buttons.
#_
#_**Note 2:**
#_  As in the original `Message` function, every line in **Msg** parameter
#_  that starts with \1 is treated as a single delimiter line;
#_  a line starting with \2 as a double delimiter line.
#_
#_**Far API used:**
#_  `Message`
#_
#_@@@
#_
</article>
</node>
<node>
id=71
lv=2
dt=Text
nm=far.SendDlgMessage
mtime=3855157810
<article>
#_Result = far.SendDlgMessage (hDlg, Msg, Param1, Param2)
#_    or
#_Result = hDlg:send (Msg, Param1, Param2)
#_
#_**Parameters:**
#_  hDlg:   userdata
#_  Msg:    flag
#_  Param1: integer (1-based where it is element index, 0-based otherwise)
#_  Param2: *(depends on Msg)*
#_
#_**Returns:**
#_  Result: *(depends on Msg)*
#_
#_**Details:**
#_
#_@DM_CLOSE,
#_@DM_EDITUNCHANGEDFLAG,
#_@DM_GETCURSORSIZE,
#_@DM_GETDROPDOWNOPENED,
#_@DM_GETFOCUS,
#_@DM_GETITEMDATA,
#_@DM_GETTEXTLENGTH,
#_@DM_LISTGETDATASIZE,
#_@DM_LISTSORT,
#_@DM_REDRAW,
#_@DM_SET3STATE,
#_@DM_SETCURSORSIZE,
#_@DM_SETDROPDOWNOPENED,
#_@DM_SETFOCUS,
#_@DM_SETITEMDATA,
#_@DM_SETMAXTEXTLENGTH,
#_@DM_SETMOUSEEVENTNOTIFY,
#_@DM_SHOWDIALOG,
#_@DM_SHOWITEM,
#_@DM_USER:
#_    Param2:  integer
#_    Result:  integer
#_
#_@DM_ENABLE:
#_    Param2:  boolean or integer
#_    Result:  boolean
#_
#_@DM_ENABLEREDRAW:
#_    Param2:  boolean or integer
#_    Result:  integer
#_
#_@DM_SETCHECK:
#_    Param2:  boolean or integer
#_    Result:  integer
#_
#_@DM_GETCHECK:
#_    Param2:  ignored
#_    Result:  false (means BSTATE_UNCHECKED)
#_              true (means BSTATE_CHECKED)
#_                 2 (means BSTATE_3STATE)
#_
#_@DM_ADDHISTORY,
#_@DM_LISTADDSTR,
#_@DM_SETTEXT,
#_@DM_SETTEXTPTR:
#_    Param2:  string
#_    Result:  integer
#_
#_@DM_SETHISTORY:
#_    Param2:  string (optional; nil causes passing NULL to FAR)
#_    Result:  integer
#_
#_@DM_LISTSETMOUSEREACTION:
#_    Param2:  flag
#_    Result:  integer
#_
#_@DM_GETDIALOGINFO:
#_    Param2:  none
#_    Result:  table (field Id: string)
#_
#_@DM_GETDLGRECT,
#_@DM_GETEDITPOSITION,
#_@DM_GETITEMPOSITION,
#_@DM_GETSELECTION,
#_@DM_LISTGETCURPOS,
#_@DM_LISTGETTITLES,
#_@DM_LISTINFO:
#_    Param2:  none
#_    Result:  table
#_
#_@DM_GETCURSORPOS:
#_    Param2:  none
#_    Result:  table (fields X,Y; 1-based), or nil
#_
#_@DM_GETTEXT,
#_@DM_GETCONSTTEXTPTR:
#_    Param2:  none
#_    Result:  string
#_
#_@DM_GETCOLOR:
#_    Param2:  none
#_    Result:  integer
#_
#_@DM_SETCOLOR:
#_    Param2:  integer
#_    Result:  integer
#_
#_@DM_KEY:
#_    Param2:  table (array of integers)
#_    Result:  integer
#_
#_@DM_LISTADD,
#_@DM_LISTSET:
#_    Param2:  table (array of tables)
#_    Result:  integer
#_    *Example:*
#_      res = far.SendDlgMessage(hDlg, "DM_LISTADD", id,
#_        { { Text="added line 1" },
#_          { Text="added line 2", Flags="LIF_CHECKED" } })
#_
#_@DM_LISTDELETE:
#_    Param2:  table, or nil
#_    Result:  integer
#_    *Example:*
#_      res = far.SendDlgMessage(hDlg, "DM_LISTDELETE", id,
#_        { StartIndex=1, Count=2 })
#_
#_@DM_LISTFINDSTRING:
#_    Param2:  table
#_    Result:  integer, or nil
#_    *Example:*
#_      res = far.SendDlgMessage(hDlg, "DM_FINDSTRING", id,
#_        { StartIndex=1, Pattern="File??.txt" })
#_
#_@DM_LISTGETITEM:
#_    Param2:  integer (ItemIndex)
#_    Result:  table, or nil
#_
#_@DM_LISTINSERT,
#_    Param2:  table
#_    Result:  integer, or nil
#_    *Example:*
#_      res = far.SendDlgMessage(hDlg, "DM_LISTINSERT", id,
#_        { Index=2, Text="Hello World", Flags="LIF_CHECKED" })
#_
#_@DM_LISTUPDATE:
#_    Param2:  table
#_    Result:  boolean
#_    *Example:*
#_      res = far.SendDlgMessage(hDlg, "DM_LISTUPDATE", id,
#_        { Index=2, Text="Hello World", Flags="LIF_CHECKED" })
#_
#_@DM_LISTSETCURPOS:
#_    Param2:  table
#_    Result:  integer
#_    *Example:*
#_      res = far.SendDlgMessage(hDlg, "DM_LISTSETCURPOS", id,
#_        { SelectPos=5, TopPos=2 })
#_    *Note:*
#_      Elements numbering is 1-based.
#_
#_@DM_LISTSETTITLES:
#_    Param2:  table
#_    Result:  integer
#_    *Example:*
#_      res = far.SendDlgMessage(hDlg, "DM_LISTSETTITLES", id,
#_        { Title="hello", Bottom="goodbye" })
#_
#_@DM_LISTGETDATA:
#_    Param2:  integer (1-based list index)
#_    Result:  either of
#_               - nil - if Far returned 0
#_               - light userdata (raw data pointer) - if alien data detected
#_               - value passed by the last DM_LISTSETDATA call
#_
#_@DM_LISTSETDATA:
#_    Param2:  table
#_               ["Index"] - integer (1-based list index)
#_               ["Data"]  - any Lua value except nil
#_    Result:  integer (returned from Far)
#_
#_@DM_GETDLGITEM:
#_    Param2:  table, or nil
#_    Result:  table
#_    *Note:*
#_      If Param2 is a table then it will be reused as an output table,
#_      i.e. its content will be modified.
#_
#_@DM_SETDLGITEM:
#_    Param2:  table
#_    Result:  boolean
#_
#_@DM_MOVEDIALOG:
#_    Param1:  integer (0=relative, otherwise absolute coordinates)
#_    Param2:  table (fields X,Y; 0-based if Param1==0 otherwise 1-based)
#_    Result:  table (fields X,Y; 1-based)
#_    *Example:*
#_      res = far.SendDlgMessage(hDlg, "DM_MOVEDIALOG", 0, { X=5, Y=-2 })
#_
#_@DM_RESIZEDIALOG:
#_    Param1:  0
#_    Param2:  table (fields X,Y; 0-based)
#_    Result:  table (fields X,Y; 0-based)
#_    *Example:*
#_      res = far.SendDlgMessage(hDlg, "DM_RESIZEDIALOG", 0, { X=70, Y=20 })
#_
#_@DM_SETCURSORPOS:
#_    Param2:  table (fields X,Y; 1-based)
#_    Result:  boolean
#_
#_@DM_SETITEMPOSITION:
#_    Param2:  table
#_    Result:  integer
#_    *Example:*
#_      res = far.SendDlgMessage(hDlg, "DM_SETITEMPOSITION", id,
#_        { Left=3, Top=3, Right=20, Bottom=5 })
#_
#_@DM_SETSELECTION:
#_    Param2:  table
#_    Result:  integer
#_    *Note:* this function has much in common with editor.Select
#_
#_@DM_SETCOMBOBOXEVENT:
#_    Param2:  flags combination
#_    Result:  integer
#_
#_@DM_SETEDITPOSITION:
#_    Param2:  table
#_    Result:  integer
#_    *Example:*
#_      res = far.SendDlgMessage(hDlg, "DM_SETEDITPOSITION", id,
#_        { CurPos=3, Overtype=0 })
#_
#_@DM_GETDLGDATA,
#_@DM_SETDLGDATA:
#_    Not supported (used internally by LuaFAR)
#_
#_
#_**Far API used:**
#_  SendDlgMessage
#_
#_@@@
#_<lua> Links = { ["editor.Select"]="42.html"; } </lua>
#_
</article>
</node>
<node>
id=462
lv=3
dt=Text
nm=Methods of dialog handle
ctime=3853816798
mtime=3853817758
<article>
#_Besides passing the dialog handle as a parameter to far.SendDlgMessage
#_there is an alternative way: using dialog handle methods. The latter
#_is shorter and more expressive, e.g. the following 2 calls do the same
#_thing:
#_    1) far.SendDlgMessage(hDlg, "DM_SETTEXT", item2, "Hello")
#_    2) hDlg:SetText(item2, "Hello")
#_
#_Below is a table of correspondence between dialog messages
#_and dialog handle methods:
#_
#_  AddHistory              DM_ADDHISTORY
#_  Close                   DM_CLOSE
#_  EditUnchangedFlag       DM_EDITUNCHANGEDFLAG
#_  Enable                  DM_ENABLE
#_  EnableRedraw            DM_ENABLEREDRAW
#_  First                   DM_FIRST
#_  GetCheck                DM_GETCHECK
#_  GetColor                DM_GETCOLOR
#_  GetComboboxEvent        DM_GETCOMBOBOXEVENT
#_  GetConstTextPtr         DM_GETCONSTTEXTPTR
#_  GetCursorPos            DM_GETCURSORPOS
#_  GetCursorSize           DM_GETCURSORSIZE
#_  GetDialogInfo           DM_GETDIALOGINFO
#_  GetDlgItem              DM_GETDLGITEM
#_  GetDlgRect              DM_GETDLGRECT
#_  GetDropdownOpened       DM_GETDROPDOWNOPENED
#_  GetEditPosition         DM_GETEDITPOSITION
#_  GetFocus                DM_GETFOCUS
#_  GetItemData             DM_GETITEMDATA
#_  GetItemPosition         DM_GETITEMPOSITION
#_  GetSelection            DM_GETSELECTION
#_  GetText                 DM_GETTEXT
#_  GetTextLength           DM_GETTEXTLENGTH
#_  GetTextPtr              DM_GETTEXTPTR
#_  Key                     DM_KEY
#_  ListAdd                 DM_LISTADD
#_  ListAddStr              DM_LISTADDSTR
#_  ListDelete              DM_LISTDELETE
#_  ListFindString          DM_LISTFINDSTRING
#_  ListGetCurPos           DM_LISTGETCURPOS
#_  ListGetData             DM_LISTGETDATA
#_  ListGetDataSize         DM_LISTGETDATASIZE
#_  ListGetItem             DM_LISTGETITEM
#_  ListGetTitles           DM_LISTGETTITLES
#_  ListInfo                DM_LISTINFO
#_  ListInsert              DM_LISTINSERT
#_  ListSet                 DM_LISTSET
#_  ListSetCurPos           DM_LISTSETCURPOS
#_  ListSetData             DM_LISTSETDATA
#_  ListSetMouseReaction    DM_LISTSETMOUSEREACTION
#_  ListSetTitles           DM_LISTSETTITLES
#_  ListSort                DM_LISTSORT
#_  ListUpdate              DM_LISTUPDATE
#_  MoveDialog              DM_MOVEDIALOG
#_  Redraw                  DM_REDRAW
#_  ResizeDialog            DM_RESIZEDIALOG
#_  Set3State               DM_SET3STATE
#_  SetCheck                DM_SETCHECK
#_  SetColor                DM_SETCOLOR
#_  SetComboboxEvent        DM_SETCOMBOBOXEVENT
#_  SetCursorPos            DM_SETCURSORPOS
#_  SetCursorSize           DM_SETCURSORSIZE
#_  SetDlgItem              DM_SETDLGITEM
#_  SetDropdownOpened       DM_SETDROPDOWNOPENED
#_  SetEditPosition         DM_SETEDITPOSITION
#_  SetFocus                DM_SETFOCUS
#_  SetHistory              DM_SETHISTORY
#_  SetItemData             DM_SETITEMDATA
#_  SetItemPosition         DM_SETITEMPOSITION
#_  SetMaxTextLength        DM_SETMAXTEXTLENGTH
#_  SetMouseEventNotify     DM_SETMOUSEEVENTNOTIFY
#_  SetSelection            DM_SETSELECTION
#_  SetText                 DM_SETTEXT
#_  SetTextPtr              DM_SETTEXTPTR
#_  ShowDialog              DM_SHOWDIALOG
#_  ShowItem                DM_SHOWITEM
#_  User                    DM_USER
#_
#_@@@
#_<lua> Links = { ["far.SendDlgMessage"]="71.html"; } </lua>
#_
</article>
</node>
<node>
id=285
lv=1
dt=Text
nm=Dialog Events
ctime=3477040474
mtime=3851945406
<article>
#_<markdown>
#_
#_### Common information
#_
#_When the 8-th argument in the [`far.Dialog`](20.html) call is
#_function (*event handler*), that function will be called by Far
#_whenever any of the numerous dialog events occur.
#_
#_
#_### Parameters passed to event handler
#_
#_1. `Param1` is integer (1-based if it is ID of a dialog element, 0-based otherwise)
#_1. For most event types, `Param2` is also integer, in accordance to Far API.
#_1. For some events ([`DN_CTLCOLORDLGLIST`](286.html),
#_   [`DN_DRAWDLGITEM`](287.html), [`DN_EDITCHANGE`](288.html),
#_   [`DN_HELP`](289.html), [`DN_INITDIALOG`](308.html),
#_   [`DN_MOUSECLICK`](290.html), [`DN_MOUSEEVENT`](291.html),
#_   [`DN_RESIZECONSOLE`](292.html)) `Param2` is non-integer,
#_   see the articles describing those events.
#_
#_
#_### Treating the return value of dialog event handler (in the order of preference)
#_
#_1. Return value of **nil** (or no value) causes **`DefDlgProc`**
#_   to be called. Its return value is returned to Far.
#_1. For some events ([`DN_CTLCOLORDLGLIST`](286.html),
#_   [`DN_GETDIALOGINFO`](305.html), [`DN_HELP`](289.html)),
#_   see the return values and their meaning in the article describing
#_   that event.
#_1. If the return value is **number**, then that number is returned
#_   to Far.
#_1. The boolean equivalent of the return value (that is, either
#_   0 or 1) is returned to Far.
#_
#_
</article>
</node>
<node>
id=297
lv=2
dt=Text
nm=DN_BTNCLICK
ctime=3477111575
mtime=3477128221
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    integer; according to Far API 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html" }</lua>
</article>
</node>
<node>
id=298
lv=2
dt=Text
nm=DN_CLOSE
ctime=3477111575
mtime=3477128999
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    integer; according to Far API 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html" }</lua>
#_
</article>
</node>
<node>
id=299
lv=2
dt=Text
nm=DN_CTLCOLORDIALOG
ctime=3477111575
mtime=3477129107
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    integer; according to Far API 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html" }</lua>
#_
</article>
</node>
<node>
id=300
lv=2
dt=Text
nm=DN_CTLCOLORDLGITEM
ctime=3477111575
mtime=3477129169
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    integer; according to Far API 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html" }</lua>
#_
</article>
</node>
<node>
id=286
lv=2
dt=Text
nm=DN_CTLCOLORDLGLIST
ctime=3477040544
mtime=3477137627
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    table (FarListColors)
#_
#_**Return**
#_    If the function returned a table (an array of new color
#_    attributes to be set), 1 is returned to Far, otherwise 0.
#_
#_@@@
#_<lua> Links = { FarListColors="293.html" } </lua>
#_
#_
</article>
</node>
<node>
id=301
lv=2
dt=Text
nm=DN_DRAGGED
ctime=3477111575
mtime=3477133365
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    integer; according to Far API 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html" }</lua>
#_
</article>
</node>
<node>
id=302
lv=2
dt=Text
nm=DN_DRAWDIALOG
ctime=3477111575
mtime=3477133526
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    integer; according to Far API 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html" }</lua>
#_
</article>
</node>
<node>
id=303
lv=2
dt=Text
nm=DN_DRAWDIALOGDONE
ctime=3477111575
mtime=3477133567
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    integer; according to Far API 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html" }</lua>
#_
</article>
</node>
<node>
id=287
lv=2
dt=Text
nm=DN_DRAWDLGITEM
ctime=3477040579
mtime=3477135140
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    table (FarDialogItem)
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = {
#_  description="285.html", FarDialogItem="295.html" }</lua>
#_
#_
</article>
</node>
<node>
id=288
lv=2
dt=Text
nm=DN_EDITCHANGE
ctime=3477040592
mtime=3477135273
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    table (FarDialogItem)
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = {
#_  description="285.html", FarDialogItem="295.html" }</lua>
#_
</article>
</node>
<node>
id=304
lv=2
dt=Text
nm=DN_ENTERIDLE
ctime=3477111575
mtime=3477135407
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    integer; according to Far API 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html" }</lua>
#_
</article>
</node>
<node>
id=305
lv=2
dt=Text
nm=DN_GETDIALOGINFO
ctime=3477111575
mtime=3477137614
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    integer; according to Far API 
#_
#_**Return**
#_    If the function returned a string >= 16 byte long (a GUID),
#_    1 is returned to Far, otherwise 0.
#_
</article>
</node>
<node>
id=306
lv=2
dt=Text
nm=DN_GOTFOCUS
ctime=3477111575
mtime=3477137091
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    integer; according to Far API 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html" }</lua>
#_
</article>
</node>
<node>
id=289
lv=2
dt=Text
nm=DN_HELP
ctime=3477040601
mtime=3477153723
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    string; according to Far API 
#_
#_**Return**
#_    If the function returned a string, its address is returned
#_    to Far, otherwise 0 is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=307
lv=2
dt=Text
nm=DN_HOTKEY
ctime=3477111575
mtime=3477137752
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    integer; according to Far API 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html" }</lua>
#_
</article>
</node>
<node>
id=308
lv=2
dt=Text
nm=DN_INITDIALOG
ctime=3477111575
mtime=3501423628
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    nil
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html" }</lua>
#_
</article>
</node>
<node>
id=309
lv=2
dt=Text
nm=DN_KEY
ctime=3477111575
mtime=3477138115
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    integer; according to Far API 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html" }</lua>
#_
</article>
</node>
<node>
id=310
lv=2
dt=Text
nm=DN_KILLFOCUS
ctime=3477111575
mtime=3477138131
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    integer; according to Far API 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html" }</lua>
#_
</article>
</node>
<node>
id=311
lv=2
dt=Text
nm=DN_LISTCHANGE
ctime=3477111575
mtime=3477138149
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    integer; according to Far API 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html" }</lua>
#_
</article>
</node>
<node>
id=312
lv=2
dt=Text
nm=DN_LISTHOTKEY
ctime=3477111575
mtime=3477138161
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    integer; according to Far API 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html" }</lua>
#_
</article>
</node>
<node>
id=290
lv=2
dt=Text
nm=DN_MOUSECLICK
ctime=3477040612
mtime=3477138291
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    table (MouseEventRecord) 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html",
#_MouseEventRecord="313.html" }</lua>
#_
</article>
</node>
<node>
id=291
lv=2
dt=Text
nm=DN_MOUSEEVENT
ctime=3477040627
mtime=3477138608
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    table (MouseEventRecord) 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html",
#_MouseEventRecord="313.html" }</lua>
#_
</article>
</node>
<node>
id=292
lv=2
dt=Text
nm=DN_RESIZECONSOLE
ctime=3477040640
mtime=3477138715
<article>
#_**Param1**
#_    integer; according to Far API 
#_
#_**Param2**
#_    table (Coord) 
#_
#_**Return**
#_    default processing of the return value, see description.
#_
#_@@@
#_<lua>Links = { description="285.html",
#_Coord="314.html" }</lua>
#_
</article>
</node>
<node>
id=79
lv=1
dt=Text
nm=Editor functions
<article>
</article>
</node>
<node>
id=22
lv=2
dt=Text
nm=editor.AddColor
mtime=3863841114
<article>
#_result = editor.AddColor (StringNumber, StartPos, EndPos, Flags, Color)
#_
#_**Parameters:**
#_  StringNumber: integer, or nil
#_  StartPos:     integer (1-based)
#_  EndPos:       integer (1-based)
#_  Flags:        flags combination
#_  Color:        integer
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_ADDCOLOR
#_
#_@@@
#_
</article>
</node>
<node>
id=223
lv=2
dt=Text
nm=editor.AddStackBookmark
<article>
#_result = editor.AddStackBookmark ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_ADDSTACKBOOKMARK
#_
#_
</article>
</node>
<node>
id=224
lv=2
dt=Text
nm=editor.ClearStackBookmarks
<article>
#_result = editor.ClearStackBookmarks ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: integer
#_
#_**Far API used:**
#_  EditorControl, ECTL_CLEARSTACKBOOKMARKS
#_
#_
</article>
</node>
<node>
id=466
lv=2
dt=Text
nm=editor.DelColor
ctime=3859993119
mtime=3859993309
<article>
#_result = editor.DelColor (StringNumber [, StartPos])
#_
#_**Parameters:**
#_  StringNumber: integer, or nil
#_  StartPos:     integer (1-based); default=0
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_ADDCOLOR
#_
#_@@@
#_
</article>
</node>
<node>
id=23
lv=2
dt=Text
nm=editor.DeleteBlock
<article>
#_result = editor.DeleteBlock ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_DELETEBLOCK
#_
#_@@@
#_
</article>
</node>
<node>
id=24
lv=2
dt=Text
nm=editor.DeleteChar
<article>
#_result = editor.DeleteChar ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_DELETECHAR
#_
#_@@@
#_
</article>
</node>
<node>
id=225
lv=2
dt=Text
nm=editor.DeleteStackBookmark
<article>
#_result = editor.DeleteStackBookmark ([position])
#_
#_**Parameters:**
#_  position: integer, or nil (nil = current position)
#_
#_**Returns:**
#_  result:   boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_DELETESTACKBOOKMARK
#_
#_
</article>
</node>
<node>
id=25
lv=2
dt=Text
nm=editor.DeleteString
<article>
#_result = editor.DeleteString ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_DELETESTRING
#_
#_@@@
#_
</article>
</node>
<node>
id=21
lv=2
dt=Text
nm=editor.Editor
mtime=3851868780
<article>
#_result = editor.Editor (FileName, Title, X1, Y1, X2, Y2,
#_                        Flags, StartLine, StartChar, CodePage)
#_
#_**Parameters:**
#_  FileName:  string
#_  Title:     string,  or nil (default = FileName)
#_  X1:        integer, or nil (default = 0)
#_  Y1:        integer, or nil (default = 0)
#_  X2:        integer, or nil (default = -1)
#_  Y2:        integer, or nil (default = -1)
#_  Flags:     flags,   or nil (default = 0)
#_  StartLine: integer, or nil (1-based; default = -1)
#_  StartChar: integer, or nil (1-based; default = -1)
#_  CodePage:  integer, or nil (default = CP_AUTODETECT)
#_
#_**Returns:**
#_  result: integer
#_
#_**Far API used:**
#_  Editor
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=27
lv=2
dt=Text
nm=editor.ExpandTabs
mtime=3851868866
<article>
#_result = editor.ExpandTabs ([StringNumber])
#_
#_**Parameters:**
#_  StringNumber: integer (1-based)
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_EXPANDTABS
#_
#_@@@
#_
</article>
</node>
<node>
id=136
lv=2
dt=Text
nm=editor.GetBookmarks
<article>
#_bookmarks = editor.GetBookmarks ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  bookmarks: table (array of "bookmark tables"), or nil
#_    fields of a "bookmark table":
#_      Line:       integer
#_      Cursor:     integer
#_      ScreenLine: integer
#_      LeftPos:    integer
#_
#_**Note:**
#_  This function groups data differently from how Far API's
#_  EditorControl(ECTL_GETBOOKMARKS) does. It places data of
#_  each bookmark into a separate table.
#_
#_**Far API used:**
#_  EditorControl, ECTL_GETBOOKMARKS, ECTL_GETINFO
#_
#_@@@
#_
</article>
</node>
<node>
id=28
lv=2
dt=Text
nm=editor.GetColor
mtime=3859991225
<article>
#_colordata = editor.GetColor(StringNumber, ColorItem)
#_
#_**Parameters:**
#_  StringNumber: integer (1-based), or nil
#_  ColorItem:    integer (1-based)
#_
#_**Returns:**
#_  colordata:    table (or nil)
#_                  StartPos:     integer
#_                  EndPos:       integer
#_                  Color:        integer
#_
#_**Far API used:**
#_  EditorControl, ECTL_GETCOLOR
#_
</article>
</node>
<node>
id=261
lv=2
dt=Text
nm=editor.GetFileName
<article>
#_FileName = editor.GetFileName ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  FileName: string
#_
#_**Far API used:**
#_  EditorControl, ECTL_GETFILENAME
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=29
lv=2
dt=Text
nm=editor.GetInfo
mtime=3853743777
<article>
#_Info = editor.GetInfo ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  Info: table, or nil
#_    Info fields:
#_      EditorID:       integer
#_      FileName:       string
#_      WindowSizeX:    integer
#_      WindowSizeY:    integer
#_      TotalLines:     integer
#_      CurLine:        integer, 1-based
#_      CurPos:         integer, 1-based
#_      CurTabPos:      integer, 1-based
#_      TopScreenLine:  integer, 1-based
#_      LeftPos:        integer, 1-based
#_      Overtype:       integer
#_      BlockType:      integer
#_      BlockStartLine: integer, 1-based
#_      Options:        integer
#_      TabSize:        integer
#_      BookMarkCount:  integer
#_      CurState:       integer
#_      CodePage:       integer
#_
#_**Far API used:**
#_  EditorControl, ECTL_GETINFO
#_
#_@@@
#_
</article>
</node>
<node>
id=30
lv=2
dt=Text
nm=editor.GetSelection
mtime=3485397529
<article>
#_**Note:**
#_--This function does not have a prototype in Far API.
#_
#_Info = editor.GetSelection ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  Info: table, or nil
#_    Info fields:
#_      BlockType: integer
#_      StartLine: integer, 0-based
#_      StartPos:  integer, 0-based
#_      EndLine:   integer, 0-based
#_      EndPos:    integer, 0-based (can be -1)
#_
#_**Far API used:**
#_  EditorControl, ECTL_GETINFO, ECTL_SETPOSITION, ECTL_GETSTRING
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=230
lv=2
dt=Text
nm=editor.GetStackBookmarks
<article>
#_bookmarks = editor.GetStackBookmarks ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  bookmarks: table (array of "bookmark tables"), or nil
#_    fields of a "bookmark table":
#_      Line:       integer
#_      Cursor:     integer
#_      ScreenLine: integer
#_      LeftPos:    integer
#_
#_**Note:**
#_  This function groups data differently from how Far API's
#_  EditorControl(ECTL_GETSTACKBOOKMARKS) does. It places data
#_  of each bookmark into a separate table.
#_
#_**Far API used:**
#_  EditorControl, ECTL_GETSTACKBOOKMARKS
#_
#_@@@
#_
</article>
</node>
<node>
id=31
lv=2
dt=Text
nm=editor.GetString
mtime=3863840796
<article>
#_**Note:**
#_  This function is an extension over its prototype in Far API.
#_
#_LineInfo = editor.GetString (StringNumber, Mode)
#_    or
#_StringText, StringEOL = editor.GetString (StringNumber, Mode)
#_
#_**Parameters:**
#_  StringNumber: integer, 1-based (default=0)
#_  Mode:         integer (0,1,2,3; default=0)
#_
#_**Returns:**
#_  LineInfo: table (Mode<2), or 2 strings (Mode>=2), or nil
#_    fields of LineInfo:
#_      StringNumber: integer, 1-based
#_      StringText:   string
#_      StringEOL:    string
#_      StringLength: integer
#_      SelStart:     integer, 1-based
#_      SelEnd:       integer, 1-based
#_
#_**Description:**
#_  The function's behavior depends on its *Mode* argument:
#_  Mode:  0 = returns: table LineInfo;        changes current position: no
#_         1 = returns: table LineInfo;        changes current position: yes
#_         2 = returns: StringText,StringEOL;  changes current position: yes
#_         3 = returns: StringText,StringEOL;  changes current position: no
#_
#_  Modes 1 and 2 have a side effect: the current line position in the Editor
#_  is set to *StringNumber*.
#_
#_**Far API used:**
#_  EditorControl, ECTL_GETINFO, ECTL_SETPOSITION, ECTL_GETSTRING
#_
#_@@@
#_
</article>
</node>
<node>
id=481
lv=2
dt=Text
nm=editor.GetStringW
ctime=3863801209
mtime=3865959577
<article>
#_Same as editor.GetString but *StringText* and *StringEOL* are encoded in UTF-32LE.
#_
#_@@@
#_<lua>Links = { ["editor.GetString"]="31.html" }</lua>
#_
</article>
</node>
<node>
id=497
lv=2
dt=Text
nm=editor.GetTitle
ctime=3871192568
mtime=3871192627
<article>
#_Title = editor.GetTitle()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  Title:    string
#_
#_**Far API used:**
#_  EditorControl, ECTL_GETTITLE
#_
#_@@@
#_
</article>
</node>
<node>
id=32
lv=2
dt=Text
nm=editor.InsertString
<article>
#_result = editor.InsertString ([indent])
#_
#_**Parameters:**
#_  indent: boolean, defaults to false
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_INSERTSTRING
#_
#_@@@
#_
</article>
</node>
<node>
id=33
lv=2
dt=Text
nm=editor.InsertText
mtime=3854221352
<article>
#_result = editor.InsertText (text [, redraw])
#_
#_**Parameters:**
#_  text:    string
#_  redraw:  boolean (default=false)
#_
#_**Returns:**
#_  result:  boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_INSERTTEXT
#_
#_@@@
#_
</article>
</node>
<node>
id=502
lv=2
dt=Text
nm=editor.InsertTextW
ctime=3872589307
mtime=3872589620
<article>
#_result = editor.InsertTextW (text [, redraw])
#_
#_**Parameters:**
#_  text:    string (in UTF-32LE encoding)
#_  redraw:  boolean (default=false)
#_
#_**Returns:**
#_  result:  boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_INSERTTEXT
#_
#_@@@
#_
</article>
</node>
<node>
id=227
lv=2
dt=Text
nm=editor.NextStackBookmark
<article>
#_result = editor.NextStackBookmark ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_NEXTSTACKBOOKMARK
#_
#_
</article>
</node>
<node>
id=226
lv=2
dt=Text
nm=editor.PrevStackBookmark
<article>
#_result = editor.PrevStackBookmark ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_PREVSTACKBOOKMARK
#_
#_
</article>
</node>
<node>
id=36
lv=2
dt=Text
nm=editor.ProcessInput
<article>
#_result = editor.ProcessInput (Input)
#_
#_**Parameters:**
#_  Input: table InputRecord.
#_         (Field *EventType* is mandatory, other fields
#_         are optional. If some field is missing, the default
#_         value of 0/false is used, except for *wRepeatCount*
#_         that defaults to 1).
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_PROCESSINPUT
#_
#_@@@
#_<lua> Links = { InputRecord="187.html" } </lua>
#_
#_
</article>
</node>
<node>
id=138
lv=2
dt=Text
nm=editor.ProcessKey
mtime=3854223043
<article>
#_editor.ProcessKey (key)
#_
#_**Parameters:**
#_  key: integer
#_
#_**Returns:**
#_  nothing
#_
#_**Example:**
#_  local F = far.Flags
#_  editor.ProcessKey (F.KEY_CTRLEND)
#_
#_**Far API used:**
#_  EditorControl, ECTL_PROCESSKEY
#_
#_@@@
#_<lua> Links = { ["farkeys.lua"]="154.html" } </lua>
#_
#_
</article>
</node>
<node>
id=37
lv=2
dt=Text
nm=editor.Quit
<article>
#_result = editor.Quit ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_QUIT
#_
#_@@@
#_
</article>
</node>
<node>
id=38
lv=2
dt=Text
nm=editor.ReadInput
<article>
#_Info = editor.ReadInput ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  Info: table InputRecord, or nil
#_
#_**Far API used:**
#_  EditorControl, ECTL_READINPUT
#_
#_@@@
#_<lua> Links = { InputRecord="187.html" } </lua>
#_
#_
</article>
</node>
<node>
id=39
lv=2
dt=Text
nm=editor.RealToTab
mtime=3851868988
<article>
#_result = editor.RealToTab (StringNumber, SrcPos)
#_
#_**Parameters:**
#_  StringNumber: integer (1-based), or nil
#_  SrcPos:       integer (1-based)
#_
#_**Returns:**
#_  result: integer (1-based), or nil
#_
#_**Far API used:**
#_  EditorControl, ECTL_REALTOTAB
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=40
lv=2
dt=Text
nm=editor.Redraw
<article>
#_result = editor.Redraw ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_REDRAW
#_
#_@@@
#_
</article>
</node>
<node>
id=41
lv=2
dt=Text
nm=editor.SaveFile
mtime=3853182596
<article>
#_result = editor.SaveFile (FileName, FileEOL, CodePage)
#_
#_**Parameters:**
#_  FileName: string, or nil
#_  FileEOL:  string, or nil
#_  CodePage: integer, or nil
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_SAVEFILE
#_
#_@@@
#_
</article>
</node>
<node>
id=42
lv=2
dt=Text
nm=editor.Select
mtime=3851869040
<article>
#_result = editor.Select (SelectData)
#_  or
#_result = editor.Select (BlockType, BlockStartLine, BlockStartPos,
#_                           BlockWidth, BlockHeight)
#_
#_**Parameters:**
#_  SelectData: table
#_    fields of SelectData:
#_      BlockType:      flag
#_        (either of: "BTYPE_NONE", "BTYPE_STREAM", "BTYPE_COLUMN")
#_      BlockStartLine: integer, 1-based
#_      BlockStartPos:  integer, 1-based
#_      BlockWidth:     integer
#_      BlockHeight:    integer
#_
#_  Parameters of the 2-nd function variant correspond to fields
#_  of the *SelectData* table.
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_SELECT
#_
#_@@@
#_
</article>
</node>
<node>
id=139
lv=2
dt=Text
nm=editor.SetKeyBar
<article>
#_result = editor.SetKeyBar (param)
#_
#_**Parameters:**
#_  param, either of:
#_      - string "redraw":  redraw the key bar titles;
#_      - string "restore": restore the original titles;
#_      - table with the following fields:
#_           Titles:           table (array of 12 strings)
#_           CtrlTitles:       table (array of 12 strings)
#_           AltTitles:        table (array of 12 strings)
#_           ShiftTitles:      table (array of 12 strings)
#_           CtrlShiftTitles:  table (array of 12 strings)
#_           AltShiftTitles:   table (array of 12 strings)
#_           CtrlAltTitles:    table (array of 12 strings)
#_        If some field is absent, the corresponding titles on
#_        the key bar will remain unchanged. The same is true
#_        for those positions in 12-string arrays that are absent.
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_SETKEYBAR
#_
#_@@@
#_
</article>
</node>
<node>
id=140
lv=2
dt=Text
nm=editor.SetParam
mtime=3488478395
<article>
#_res1 [, res2] = editor.SetParam (Type, Param [, Flags])
#_
#_**Parameters:**
#_  Type:  flag
#_  Param: integer, boolean, or string
#_  Flags: flags combination, or nil
#_
#_**Returns:**
#_  res1: boolean
#_  res2: string (if Type==ESPT_GETWORDDIV), or nil
#_
#_**Far API used:**
#_  EditorControl, ECTL_SETPARAM
#_
#_@@@
#_
</article>
</node>
<node>
id=43
lv=2
dt=Text
nm=editor.SetPosition
mtime=3851869097
<article>
#_result = editor.SetPosition (PosData)
#_  or
#_result = editor.SetPosition (CurLine, CurPos, CurTabPos,
#_                          TopScreenLine, LeftPos, Overtype)
#_
#_**Parameters:**
#_  PosData: table
#_    fields of PosData:
#_      CurLine:       integer, 1-based
#_      CurPos:        integer, 1-based
#_      CurTabPos:     integer, 1-based
#_      TopScreenLine: integer, 1-based
#_      LeftPos:       integer, 1-based
#_      Overtype:      integer
#_
#_  Parameters of the 2-nd function variant correspond to fields
#_  of the *PosData* table.
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_SETPOSITION
#_
#_@@@
#_
</article>
</node>
<node>
id=44
lv=2
dt=Text
nm=editor.SetString
mtime=3851869148
<article>
#_result = editor.SetString (StringNumber, StringText, StringEOL)
#_
#_**Parameters:**
#_  StringNumber: integer, 1-based (default=0)
#_  StringText:   string
#_  StringEOL:    string, or nil
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_SETSTRING
#_
#_@@@
#_
</article>
</node>
<node>
id=490
lv=2
dt=Text
nm=editor.SetStringW
ctime=3867751767
mtime=3867751916
<article>
#_Same as `editor.SetString` but *StringText* and *StringEOL*
#_should be encoded in UTF-32LE.
#_
#_@@@
#_<lua> Links = {
#_  ["editor.SetString"]="44.html" 
#_} </lua>
#_
</article>
</node>
<node>
id=45
lv=2
dt=Text
nm=editor.SetTitle
mtime=3480964976
<article>
#_result = editor.SetTitle ([Title])
#_
#_**Parameters:**
#_  Title: string, or nil
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_SETTITLE
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=48
lv=2
dt=Text
nm=editor.TabToReal
mtime=3851869191
<article>
#_result = editor.TabToReal (StringNumber, SrcPos)
#_
#_**Parameters:**
#_  StringNumber: integer (1-based), or nil
#_  SrcPos:       integer (1-based)
#_
#_**Returns:**
#_  result: integer (1-based), or nil
#_
#_**Far API used:**
#_  EditorControl, ECTL_TABTOREAL
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=137
lv=2
dt=Text
nm=editor.TurnOffMarkingBlock
<article>
#_editor.TurnOffMarkingBlock ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  nothing
#_
#_**Far API used:**
#_  EditorControl, ECTL_TURNOFFMARKINGBLOCK
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=283
lv=2
dt=Text
nm=editor.UndoRedo
ctime=3476902749
mtime=3480263116
<article>
#_result = editor.UndoRedo (Command)
#_
#_**Parameters:**
#_  Command: flag
#_
#_**Returns:**
#_  result:  boolean
#_
#_**Far API used:**
#_  EditorControl, ECTL_UNDOREDO
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=403
lv=1
dt=Text
nm=Panel functions
ctime=3851349067
mtime=3853513022
<article>
#_<markdown>
#_All functions having their 1-st parameter named `handle` accept it in either of 2 variants:
#_-------------------------------------------------------------------------------------------
#_
#_1. panel handle (light userdata)
#_2. number: 1=active panel, 0=passive panel
#_
</article>
</node>
<node>
id=457
lv=2
dt=Text
nm=panel.BeginSelection
ctime=3853444384
mtime=3853511949
<article>
#_result = panel.BeginSelection (handle)
#_
#_**Parameters:**
#_  handle:  panel handle
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_BEGINSELECTION
#_
#_@@@
#_
</article>
</node>
<node>
id=145
lv=2
dt=Text
nm=panel.CheckPanelsExist
mtime=3853511531
<article>
#_result = panel.CheckPanelsExist ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_CHECKPANELSEXIST
#_
#_@@@
#_
</article>
</node>
<node>
id=330
lv=2
dt=Text
nm=panel.ClearSelection
ctime=3480322277
mtime=3853511941
<article>
#_result = panel.ClearSelection (handle, items)
#_
#_**Parameters:**
#_  handle:  panel handle
#_  items:   integer (1-based item index),
#_           or table (array of item indexes)
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_GETPANELINFO, FCTL_BEGINSELECTION,
#_  FCTL_CLEARSELECTION, FCTL_ENDSELECTION
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=4
lv=2
dt=Text
nm=panel.ClosePlugin
mtime=3853511972
<article>
#_result = panel.ClosePlugin (handle [, dir])
#_
#_**Parameters:**
#_  handle:  panel handle
#_  dir:     string (defaults to ".")
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_CLOSEPLUGIN
#_
#_@@@
#_
</article>
</node>
<node>
id=458
lv=2
dt=Text
nm=panel.EndSelection
ctime=3853444404
mtime=3853511995
<article>
#_result = panel.EndSelection (handle)
#_
#_**Parameters:**
#_  handle:  panel handle
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_ENDSELECTION
#_
#_@@@
#_
</article>
</node>
<node>
id=5
lv=2
dt=Text
nm=panel.GetCmdLine
mtime=3853512018
<article>
#_result = panel.GetCmdLine ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: string (or nil)
#_
#_**Far API used:**
#_  Control, FCTL_GETCMDLINE
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=6
lv=2
dt=Text
nm=panel.GetCmdLinePos
mtime=3853512036
<article>
#_pos = panel.GetCmdLinePos ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  pos: 1-based position (or nil)
#_
#_**Far API used:**
#_  Control, FCTL_GETCMDLINEPOS
#_
#_@@@
#_
</article>
</node>
<node>
id=331
lv=2
dt=Text
nm=panel.GetCmdLineSelection
ctime=3480326038
mtime=3853512053
<article>
#_SelStart, SelEnd = panel.GetCmdLineSelection ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  SelStart: integer (1-based)
#_  SelEnd:   integer
#_
#_**Far API used:**
#_  Control, FCTL_GETCMDLINESELECTION
#_
#_@@@
#_
</article>
</node>
<node>
id=258
lv=2
dt=Text
nm=panel.GetColumnTypes
mtime=3853512078
<article>
#_ColumnTypes = panel.GetColumnTypes (handle)
#_
#_**Parameters:**
#_  handle:      panel handle
#_
#_**Returns:**
#_  ColumnTypes: string
#_
#_**Far API used:**
#_  Control, FCTL_GETCOLUMNTYPES
#_
#_@@@
#_
</article>
</node>
<node>
id=259
lv=2
dt=Text
nm=panel.GetColumnWidths
mtime=3853512110
<article>
#_ColumnWidths = panel.GetColumnWidths (handle)
#_
#_**Parameters:**
#_  handle:       panel handle
#_
#_**Returns:**
#_  ColumnWidths: string
#_
#_**Far API used:**
#_  Control, FCTL_GETCOLUMNWIDTHS
#_
#_@@@
#_
</article>
</node>
<node>
id=252
lv=2
dt=Text
nm=panel.GetCurrentPanelItem
mtime=3853512132
<article>
#_item = panel.GetCurrentPanelItem (handle)
#_
#_**Parameters:**
#_  handle:    panel handle
#_
#_**Returns:**
#_  item:      PluginPanelItem
#_
#_**Far API used:**
#_  Control, FCTL_GETCURRENTPANELITEM
#_
#_@@@
#_<lua> Links = { PluginPanelItem="85.html" } </lua>
#_
</article>
</node>
<node>
id=260
lv=2
dt=Text
nm=panel.GetPanelDirectory
mtime=3855072295
<article>
#_PanelDir = panel.GetPanelDirectory (handle)
#_
#_**Parameters:**
#_  handle:    panel handle
#_
#_**Returns:**
#_  PanelDir:  string
#_
#_**Far API used:**
#_  Control, FCTL_GETPANELDIR
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=381
lv=2
dt=Text
nm=panel.GetPanelFormat
ctime=3492068593
mtime=3853513155
<article>
#_PanelFormat = panel.GetPanelFormat (handle)
#_
#_**Parameters:**
#_  handle:       panel handle
#_
#_**Returns:**
#_  PanelFormat:  string
#_
#_**Far API used:**
#_  Control, FCTL_GETPANELFORMAT
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=382
lv=2
dt=Text
nm=panel.GetPanelHostFile
ctime=3492068606
mtime=3853512200
<article>
#_HostFile = panel.GetPanelHostFile (handle)
#_
#_**Parameters:**
#_  handle:    panel handle
#_
#_**Returns:**
#_  HostFile:  string
#_
#_**Far API used:**
#_  Control, FCTL_GETPANELHOSTFILE
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=7
lv=2
dt=Text
nm=panel.GetPanelInfo
mtime=3853512219
<article>
#_PanelInfo = panel.GetPanelInfo (handle)
#_
#_**Parameters:**
#_  handle:    panel handle
#_
#_**Returns:**
#_  PanelInfo: table, or nil
#_    fields of PanelInfo:
#_      PluginHandle:        userdata, or nil
#_      PanelType:           integer
#_      PanelRect:           table (fields: left, top, right, bottom)
#_      ItemsNumber:         integer
#_      SelectedItemsNumber: integer
#_      CurrentItem:         1-based integer
#_      TopPanelItem:        1-based integer
#_      ViewMode:            integer
#_      SortMode:            integer
#_      Plugin:              boolean
#_      Visible:             boolean
#_      Focus:               boolean
#_      ShortNames:          boolean
#_      Flags:               integer
#_
#_**Far API used:**
#_  Control, FCTL_GETPANELINFO
#_
#_@@@
#_<lua> Links = { PluginPanelItem="85.html" } </lua>
#_
#_
</article>
</node>
<node>
id=253
lv=2
dt=Text
nm=panel.GetPanelItem
mtime=3853512251
<article>
#_item = panel.GetPanelItem (handle, itemindex)
#_
#_**Parameters:**
#_  handle:    panel handle
#_  itemindex: integer (1-based)
#_
#_**Returns:**
#_  item:      PluginPanelItem
#_
#_**Far API used:**
#_  Control, FCTL_GETPANELITEM
#_
#_@@@
#_<lua> Links = { PluginPanelItem="85.html" } </lua>
#_
</article>
</node>
<node>
id=455
lv=2
dt=Text
nm=panel.GetPanelPluginHandle
ctime=3853322264
mtime=3853513277
<article>
#_panel_handle = panel.GetPanelPluginHandle (handle)
#_
#_**Parameters:**
#_  handle:        panel handle
#_
#_**Returns:**
#_  panel_handle:  lightuserdata, or nil
#_
#_**Far API used:**
#_  Control, FCTL_GETPANELPLUGINHANDLE
#_
#_@@@
#_
</article>
</node>
<node>
id=498
lv=2
dt=Text
nm=panel.GetPanelPrefix
ctime=3871200318
mtime=3871200417
<article>
#_Prefix = panel.GetPanelPrefix (handle)
#_
#_**Parameters:**
#_  handle:  panel handle
#_
#_**Returns:**
#_  Prefix:  string
#_
#_**Far API used:**
#_  PanelControl, FCTL_GETPANELPREFIX
#_
#_@@@
#_
</article>
</node>
<node>
id=254
lv=2
dt=Text
nm=panel.GetSelectedPanelItem
mtime=3853512338
<article>
#_item = panel.GetSelectedPanelItem (handle, itemindex)
#_
#_**Parameters:**
#_  handle:    panel handle
#_  itemindex: integer (1-based)
#_
#_**Returns:**
#_  item:      PluginPanelItem
#_
#_**Far API used:**
#_  Control, FCTL_GETSELECTEDPANELITEM
#_
#_@@@
#_<lua> Links = { PluginPanelItem="85.html" } </lua>
#_
</article>
</node>
<node>
id=228
lv=2
dt=Text
nm=panel.GetUserScreen
mtime=3853512521
<article>
#_result = panel.GetUserScreen ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_GETUSERSCREEN
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=9
lv=2
dt=Text
nm=panel.InsertCmdLine
mtime=3853512583
<article>
#_result = panel.InsertCmdLine (str)
#_
#_**Parameters:**
#_  str:    string
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_INSERTCMDLINE
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=320
lv=2
dt=Text
nm=panel.IsActivePanel
ctime=3480215162
mtime=3853512604
<article>
#_result = panel.IsActivePanel (handle)
#_
#_**Parameters:**
#_  handle: panel handle
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_ISACTIVEPANEL
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=10
lv=2
dt=Text
nm=panel.RedrawPanel
mtime=3853512643
<article>
#_result = panel.RedrawPanel (handle [, redrawinfo])
#_
#_**Parameters:**
#_  handle:     panel handle
#_  redrawinfo: table with the following fields:
#_                CurrentItem  : integer (1-based)
#_                TopPanelItem : integer (1-based)
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_REDRAWPANEL
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=499
lv=2
dt=Text
nm=panel.SetActivePanel
ctime=3871203571
mtime=3871203615
<article>
#_result = panel.SetActivePanel (handle)
#_
#_**Parameters:**
#_  handle:  panel handle
#_
#_**Returns:**
#_  result:  boolean
#_
#_**Far API used:**
#_  PanelControl, FCTL_SETACTIVEPANEL
#_
#_@@@
#_
</article>
</node>
<node>
id=395
lv=2
dt=Text
nm=panel.SetCaseSensitiveSort
ctime=3501391498
mtime=3853513307
<article>
#_result = panel.SetCaseSensitiveSort (handle [, set])
#_
#_**Parameters:**
#_  handle:    panel handle
#_  set:       boolean, defaults to false
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_SETCASESENSITIVESORT
#_
#_@@@
#_
</article>
</node>
<node>
id=11
lv=2
dt=Text
nm=panel.SetCmdLine
mtime=3853512699
<article>
#_result = panel.SetCmdLine (str)
#_
#_**Parameters:**
#_  str:    string
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_SETCMDLINE
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=12
lv=2
dt=Text
nm=panel.SetCmdLinePos
mtime=3853512711
<article>
#_result = panel.SetCmdLinePos (pos)
#_
#_**Parameters:**
#_  pos:    1-based integer
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_SETCMDLINEPOS
#_
#_@@@
#_
</article>
</node>
<node>
id=332
lv=2
dt=Text
nm=panel.SetCmdLineSelection
ctime=3480326063
mtime=3853512722
<article>
#_result = panel.SetCmdLineSelection (selStart, selEnd)
#_
#_**Parameters:**
#_  selStart: integer (1-based)
#_  selEnd:   integer
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_SETCMDLINESELECTION
#_
#_@@@
#_
</article>
</node>
<node>
id=454
lv=2
dt=Text
nm=panel.SetDirectoriesFirst
ctime=3853224715
mtime=3853512744
<article>
#_result = panel.SetDirectoriesFirst (handle [, setfirst])
#_
#_**Parameters:**
#_  handle:     panel handle
#_  setfirst:   boolean (false=don't set directories first; true=set first;
#_                       defaults to false)
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_SETDIRECTORIESFIRST
#_
#_@@@
#_
</article>
</node>
<node>
id=146
lv=2
dt=Text
nm=panel.SetNumericSort
mtime=3853512765
<article>
#_result = panel.SetNumericSort (handle [, set])
#_
#_**Parameters:**
#_  handle:    panel handle
#_  set:       boolean, defaults to false
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_SETNUMERICSORT
#_
#_@@@
#_
</article>
</node>
<node>
id=13
lv=2
dt=Text
nm=panel.SetPanelDirectory
mtime=3853512789
<article>
#_result = panel.SetPanelDirectory (handle, dir)
#_
#_**Parameters:**
#_  handle:    panel handle
#_  dir:       string
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_SETPANELDIR
#_
#_@@@
#_
</article>
</node>
<node>
id=14
lv=2
dt=Text
nm=panel.SetSelection
mtime=3853512829
<article>
#_result = panel.SetSelection (handle, items, selection)
#_
#_**Parameters:**
#_  handle:       panel handle
#_  items:        integer (1-based item index),
#_                or table (array of item indexes)
#_  selection:    boolean
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_GETPANELINFO, FCTL_BEGINSELECTION,
#_  FCTL_SETSELECTION, FCTL_ENDSELECTION
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=147
lv=2
dt=Text
nm=panel.SetSortMode
mtime=3853512871
<article>
#_result = panel.SetSortMode (handle, mode)
#_
#_**Parameters:**
#_  handle:    panel handle
#_  mode:      flag (integer or string)
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_SETSORTMODE
#_
#_@@@
#_
</article>
</node>
<node>
id=148
lv=2
dt=Text
nm=panel.SetSortOrder
mtime=3853512890
<article>
#_result = panel.SetSortOrder (handle [, order])
#_
#_**Parameters:**
#_  handle:    panel handle
#_  order:     boolean (false=direct order; true=reverse order;
#_                      defaults to false)
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_SETSORTORDER
#_
#_@@@
#_
</article>
</node>
<node>
id=15
lv=2
dt=Text
nm=panel.SetUserScreen
mtime=3853512537
<article>
#_result = panel.SetUserScreen ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_SETUSERSCREEN
#_
#_@@@
#_
</article>
</node>
<node>
id=16
lv=2
dt=Text
nm=panel.SetViewMode
mtime=3853512920
<article>
#_result = panel.SetViewMode (handle, mode)
#_
#_**Parameters:**
#_  handle:    panel handle
#_  mode:      integer (0...9)
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_SETVIEWMODE
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=17
lv=2
dt=Text
nm=panel.UpdatePanel
mtime=3853512944
<article>
#_result = panel.UpdatePanel (handle [, keepselection])
#_
#_**Parameters:**
#_  handle:         panel handle
#_  keepselection:  boolean, defaults to false
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Control, FCTL_UPDATEPANEL
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=80
lv=1
dt=Text
nm=Viewer functions
<article>
</article>
</node>
<node>
id=468
lv=2
dt=Text
nm=viewer.GetFileName
ctime=3861166983
mtime=3861167038
<article>
#_FileName = viewer.GetFileName ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  FileName: string
#_
#_**Far API used:**
#_  ViewerControl, VCTL_GETINFO
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=132
lv=2
dt=Text
nm=viewer.GetInfo
mtime=3851877307
<article>
#_Info = viewer.GetInfo ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  Info: table, or nil
#_    Info fields:
#_      ViewerID:       integer
#_      FileName:       string
#_      FileSize:       double
#_      FilePos:        double, 0-based
#_      WindowSizeX:    integer
#_      WindowSizeY:    integer
#_      Options:        integer
#_      TabSize:        integer
#_      LeftPos:        double, 1-based
#_      CurMode:        table
#_
#_**Far API used:**
#_  ViewerControl, VCTL_GETINFO
#_
#_@@@
#_<lua> Links = { CurMode="133.html" } </lua>
#_
</article>
</node>
<node>
id=134
lv=2
dt=Text
nm=viewer.Quit
<article>
#_viewer.Quit ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  nothing
#_
#_**Far API used:**
#_  ViewerControl, VCTL_QUIT
#_
#_@@@
#_
</article>
</node>
<node>
id=135
lv=2
dt=Text
nm=viewer.Redraw
<article>
#_viewer.Redraw ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  nothing
#_
#_**Far API used:**
#_  ViewerControl, VCTL_REDRAW
#_
#_@@@
#_
</article>
</node>
<node>
id=144
lv=2
dt=Text
nm=viewer.Select
<article>
#_result = viewer.Select (BlockStartPos, BlockLen)
#_
#_**Parameters:**
#_  BlockStartPos: number
#_  BlockLen:      integer
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  ViewerControl, VCTL_SELECT
#_
#_@@@
#_
</article>
</node>
<node>
id=141
lv=2
dt=Text
nm=viewer.SetKeyBar
<article>
#_result = viewer.SetKeyBar (param)
#_
#_**Parameters:**
#_  same as in editor.SetKeyBar
#_
#_**Returns:**
#_  same as in editor.SetKeyBar
#_
#_**Far API used:**
#_  ViewerControl, VCTL_SETKEYBAR
#_
#_@@@
#_<lua> Links = { ["editor.SetKeyBar"]="139.html" } </lua>
#_
</article>
</node>
<node>
id=229
lv=2
dt=Text
nm=viewer.SetMode
mtime=3480263244
<article>
#_result = viewer.SetMode (ModeData)
#_
#_**Parameters:**
#_  ModeData: table
#_    fields of ModeData:
#_      Type:      flag
#_      iParam:    integer
#_      Flags:     flag
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  ViewerControl, VCTL_SETMODE
#_
</article>
</node>
<node>
id=142
lv=2
dt=Text
nm=viewer.SetPosition
mtime=3851877803
<article>
#_pos = viewer.SetPosition (PosData)
#_  or
#_pos = viewer.SetPosition (StartPos, LeftPos, Flags)
#_
#_**Parameters:**
#_  PosData: table
#_    fields of PosData:
#_      StartPos:  number, 0-based
#_      LeftPos:   number, 1-based
#_      Flags:     integer
#_
#_  Parameters of the 2-nd function variant correspond to fields
#_  of the *PosData* table.
#_
#_**Returns:**
#_  pos:     resulting value of *StartPos* (number), or nil
#_
#_**Far API used:**
#_  ViewerControl, VCTL_SETPOSITION
#_
#_@@@
#_
</article>
</node>
<node>
id=77
lv=2
dt=Text
nm=viewer.Viewer
mtime=3482049266
<article>
#_result = viewer.Viewer (FileName, Title, X1, Y1, X2, Y2, Flags, CodePage)
#_
#_**Parameters:**
#_  FileName: string
#_  Title:    string  (defaults to FileName)
#_  X1:       integer (defaults to 0)
#_  Y1:       integer (defaults to 0)
#_  X2:       integer (defaults to -1)
#_  Y2:       integer (defaults to -1)
#_  Flags:    flags combination (defaults to 0)
#_  CodePage: integer (defaults to CP_AUTODETECT)
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  Viewer
#_
#_@@@
#_
</article>
</node>
<node>
id=322
lv=1
dt=Text
nm=File Filter Control
ctime=3480243081
mtime=3851611400
<article>
#_<markdown>
#_File filter control is implemented as bindings of Far API
#_function `FileFilterControl`. LuaFAR API is chosen to be
#_different from Far API (in fact, it is much simpler).
#_
#_The API consists of 1 function ([`far.CreateFileFilter`](323.html))
#_that creates an instance of file filter object, the latter has 4
#_methods:
#_[`FreeFileFilter`](324.html),
#_[`OpenFiltersMenu`](325.html),
#_[`StartingToFilter`](326.html) and
#_[`IsFileInFilter`](327.html).
#_
#_#### Example
#_        -- create a filter for the "active panel" area
#_        local AFilter = far.CreateFileFilter(1, "FFT_PANEL")
#_        if AFilter then
#_          -- update the "current time" parameter
#_          AFilter:StartingToFilter()
#_
#_          -- manipulate panel elements
#_          for i=1, pInfo.ItemsNumber do
#_            -- apply the filter...
#_            local item = panel.GetPanelItem(nil, 1, i)
#_            if AFilter:IsFileInFilter(item) then
#_              -- the element matches filter conditions;
#_              -- process the element...
#_            end
#_          end
#_
#_          -- free memory
#_          AFilter:FreeFileFilter()
#_        end
#_
#_
#_
</article>
</node>
<node>
id=323
lv=2
dt=Text
nm=far.CreateFileFilter
ctime=3480243198
mtime=3480263718
<article>
#_f = far.CreateFileFilter (whatPanel, filterType)
#_
#_**Parameters:**
#_  whatPanel:  integer (0=passive panel, 1=active panel)
#_  filterType: flag
#_
#_**Returns:**
#_  f:          userdata (file filter object), or nil
#_
#_**Description:**
#_  The created object has the following methods: FreeFileFilter,
#_  OpenFiltersMenu, StartingToFilter and IsFileInFilter.
#_
#_**Far API used:**
#_  FileFilterControl, FFCTL_CREATEFILEFILTER
#_
#_@@@
#_<lua> Links =
#_{ FreeFileFilter="324.html", OpenFiltersMenu="325.html",
#_  StartingToFilter="326.html", IsFileInFilter="327.html" }
#_</lua>
#_
</article>
</node>
<node>
id=324
lv=2
dt=Text
nm=FreeFileFilter
ctime=3480243269
mtime=3481258596
<article>
#_result = f:FreeFileFilter ()
#_
#_**Parameters:**
#_  f:       file filter object
#_
#_**Returns:**
#_  result:  boolean
#_
#_**Note:**
#_  File filter objects are subject to garbage collection,
#_  thus calling this method is not mandatory.
#_
#_**Far API used:**
#_  FileFilterControl, FFCTL_FREEFILEFILTER
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=325
lv=2
dt=Text
nm=OpenFiltersMenu
ctime=3480243300
mtime=3480252058
<article>
#_result = f:OpenFiltersMenu ()
#_
#_**Parameters:**
#_  f:       file filter object
#_
#_**Returns:**
#_  result:  boolean
#_
#_**Far API used:**
#_  FileFilterControl, FFCTL_OPENFILTERSMENU
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=326
lv=2
dt=Text
nm=StartingToFilter
ctime=3480243319
mtime=3480252113
<article>
#_result = f:StartingToFilter ()
#_
#_**Parameters:**
#_  f:       file filter object
#_
#_**Returns:**
#_  result:  boolean
#_
#_**Far API used:**
#_  FileFilterControl, FFCTL_STARTINGTOFILTER
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=327
lv=2
dt=Text
nm=IsFileInFilter
ctime=3480243336
mtime=3853777078
<article>
#_result = f:IsFileInFilter (fileData)
#_
#_**Parameters:**
#_  f:        file filter object
#_  fileData: table FindData
#_
#_**Returns:**
#_  result:  boolean
#_
#_**Far API used:**
#_  FileFilterControl, FFCTL_ISFILEINFILTER
#_
#_@@@
#_<lua> Links = { FindData="90.html", } </lua>
#_
</article>
</node>
<node>
id=428
lv=1
dt=Text
nm=Macro Control
ctime=3851439608
mtime=3851439608
<article>
</article>
</node>
<node>
id=477
lv=2
dt=Text
nm=far.MacroAdd
ctime=3862320428
mtime=3862320801
<article>
#_Id = far.MacroAdd (Area, Flags, AKey, SequenceText, Description, Callback, Priority)
#_
#_**Parameters:**
#_  Area:         flags (defaults to MACROAREA_COMMON)
#_  Flags:        flags (defaults to 0)
#_  AKey:         string (e.g. "CtrlShiftF12")
#_  SequenceText: string
#_  Description:  string (defaults to "")
#_  Callback:     function, or nil
#_  Priority:     integer (defaults to 50)
#_
#_**Returns:**
#_  Id:           userdata (success), or nil (failure)
#_                  used in Callback and `far.MacroDelete`
#_
#_**Far API used:**
#_  MacroControl(MCTL_ADDMACRO)
#_
#_**Example:**
#_  local F = far.Flags
#_
#_  local function Callback (Id, Flags)
#_    return some_condition and another_condition
#_  end
#_
#_  local Id = far.MacroAdd(
#_    F.MACROAREA_SHELL,
#_    0,
#_    "CtrlShiftF12",
#_    'msgbox("test","test")',
#_    "cool macro",
#_    Callback)
#_
#_@@@
#_<lua> Links = {
#_  ["far.MacroDelete"]="478.html";
#_  ["MacroControl"] = "http://api.farmanager.com/ru/service_functions/macrocontrol.html";
#_  ["MCTL_ADDMACRO"] = "http://api.farmanager.com/ru/service_functions/macrocontrol.html#MCTL_ADDMACRO";
#_} </lua>
#_
</article>
</node>
<node>
id=429
lv=2
dt=Text
nm=far.MacroCheck
ctime=3851440061
mtime=3861762920
<article>
#_result = far.MacroCheck (SequenceText, Flags)
#_
#_**Parameters:**
#_  SequenceText: string
#_  Flags:        flags (defaults to 0)
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  MacroControl(MCTL_SENDSTRING, MSSC_CHECK)
#_
#_@@@
#_<lua> Links = {
#_MacroControl = "http://api.farmanager.com/ru/service_functions/macrocontrol.html";
#_MCTL_SENDSTRING = "http://api.farmanager.com/ru/service_functions/macrocontrol.html#MCTL_SENDSTRING";
#_MSSC_CHECK = "http://api.farmanager.com/ru/service_functions/macrocontrol.html#MSSC_CHECK";
#_} </lua>
#_
</article>
</node>
<node>
id=478
lv=2
dt=Text
nm=far.MacroDelete
ctime=3862320437
mtime=3862320979
<article>
#_result = far.MacroDelete (Id)
#_
#_**Parameters:**
#_  Id:      userdata (value returned by `far.MacroAdd`)
#_
#_**Returns:**
#_  result:  boolean
#_
#_**Far API used:**
#_  MacroControl(MCTL_DELMACRO)
#_
#_@@@
#_<lua> Links = {
#_  ["far.MacroAdd"]="477.html";
#_  ["MacroControl"] = "http://api.farmanager.com/ru/service_functions/macrocontrol.html";
#_  ["MCTL_DELMACRO"] = "http://api.farmanager.com/ru/service_functions/macrocontrol.html#MCTL_DELMACRO";
#_} </lua>
#_
</article>
</node>
<node>
id=474
lv=2
dt=Text
nm=far.MacroExecute
ctime=3861727323
mtime=3865959595
<article>
#_result = far.MacroExecute (SequenceText, Flags, ...)
#_
#_**Parameters:**
#_  SequenceText: string
#_  Flags:        flags (optional)
#_  ...:          arguments for passing to script (optional)
#_
#_**Returns:**
#_  result: table (array of elements returned by the script), or nil
#_
#_**Description:**
#_  Execute a script in the context of LuaMacro plugin.
#_
#_**Notes:**
#_  1. Arguments being passed to the script may be of the following Lua types:
#_     string, boolean, number, nil, "int64", or "binary".
#_
#_  2. The returned table contains field "n" - number of elements in the array.
#_     Use it instead of #result, since there can be elements with nil value.
#_
#_     To properly unpack the table, do:
#_         unpack(result, 1, result.n)
#_
#_**Definitions:**
#_  **"int64"**
#_    Type of userdata, produced by `bit64` library.
#_  **"binary"**
#_    By convention, it is a string enclosed in a table as its first element.
#_    The string is intended to be passed to and from without conversions UTF-8 <-> UTF-32LE.
#_
#_**Far API used:**
#_  MacroControl(MCTL_EXECSTRING)
#_
#_@@@
#_<lua> Links = {
#_  bit64 = "471.html";
#_  MacroControl = "http://api.farmanager.com/ru/service_functions/macrocontrol.html";
#_  MCTL_EXECSTRING = "http://api.farmanager.com/ru/service_functions/macrocontrol.html#MCTL_EXECSTRING";
#_} </lua>
#_
</article>
</node>
<node>
id=430
lv=2
dt=Text
nm=far.MacroGetArea
ctime=3851440090
mtime=3861763339
<article>
#_result = far.MacroGetArea ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: integer
#_
#_**Far API used:**
#_  MacroControl(MCTL_GETAREA)
#_
#_@@@
#_<lua> Links = {
#_MacroControl = "http://api.farmanager.com/ru/service_functions/macrocontrol.html";
#_MCTL_GETAREA = "http://api.farmanager.com/ru/service_functions/macrocontrol.html#MCTL_GETAREA";
#_} </lua>
#_
</article>
</node>
<node>
id=475
lv=2
dt=Text
nm=far.MacroGetLastError
ctime=3861727416
mtime=3861763383
<article>
#_result = far.MacroGetLastError()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result:  table
#_             ErrCode:  integer
#_             ErrPosX:  integer
#_             ErrPosY:  integer
#_             ErrSrc:   string
#_
#_**Far API used:**
#_  MacroControl(MCTL_GETLASTERROR)
#_
#_@@@
#_<lua> Links = {
#_MacroControl = "http://api.farmanager.com/ru/service_functions/macrocontrol.html";
#_MCTL_GETLASTERROR = "http://api.farmanager.com/ru/service_functions/macrocontrol.html#MCTL_GETLASTERROR";
#_} </lua>
#_
</article>
</node>
<node>
id=431
lv=2
dt=Text
nm=far.MacroGetState
ctime=3851440130
mtime=3861763425
<article>
#_result = far.MacroGetState ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: integer
#_
#_**Far API used:**
#_  MacroControl(MCTL_GETSTATE)
#_
#_@@@
#_<lua> Links = {
#_MacroControl = "http://api.farmanager.com/ru/service_functions/macrocontrol.html";
#_MCTL_GETSTATE = "http://api.farmanager.com/ru/service_functions/macrocontrol.html#MCTL_GETSTATE";
#_} </lua>
#_
</article>
</node>
<node>
id=432
lv=2
dt=Text
nm=far.MacroLoadAll
ctime=3851440174
mtime=3861763454
<article>
#_result = far.MacroLoadAll ([path [,flags]])
#_
#_**Parameters:**
#_  path:   string, or nil
#_  flags:  flags
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  MacroControl(MCTL_LOADALL)
#_
#_@@@
#_<lua> Links = {
#_MacroControl = "http://api.farmanager.com/ru/service_functions/macrocontrol.html";
#_MCTL_LOADALL = "http://api.farmanager.com/ru/service_functions/macrocontrol.html#MCTL_LOADALL";
#_} </lua>
#_
</article>
</node>
<node>
id=433
lv=2
dt=Text
nm=far.MacroPost
ctime=3851440284
mtime=3861763545
<article>
#_result = far.MacroPost (SequenceText, Flags, AKey)
#_
#_**Parameters:**
#_  SequenceText: string
#_  Flags:        flags (defaults to 0)
#_  AKey:         integer, or string (e.g. "CtrlShiftF12"); optional
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  MacroControl(MCTL_SENDSTRING, MSSC_POST)
#_
#_@@@
#_<lua> Links = {
#_MacroControl = "http://api.farmanager.com/ru/service_functions/macrocontrol.html";
#_MCTL_SENDSTRING = "http://api.farmanager.com/ru/service_functions/macrocontrol.html#MCTL_SENDSTRING";
#_MSSC_POST = "http://api.farmanager.com/ru/service_functions/macrocontrol.html#MSSC_POST";
#_} </lua>
#_
</article>
</node>
<node>
id=434
lv=2
dt=Text
nm=far.MacroSaveAll
ctime=3851440306
mtime=3861763723
<article>
#_result = far.MacroSaveAll ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  MacroControl(MCTL_SAVEALL)
#_
#_@@@
#_<lua> Links = {
#_MacroControl = "http://api.farmanager.com/ru/service_functions/macrocontrol.html";
#_MCTL_SAVEALL = "http://api.farmanager.com/ru/service_functions/macrocontrol.html#MCTL_SAVEALL";
#_} </lua>
#_
</article>
</node>
<node>
id=415
lv=1
dt=Text
nm=Plugins Control
ctime=3851399234
mtime=3851399293
<article>
</article>
</node>
<node>
id=505
lv=2
dt=Text
nm=far.ClearPluginCache
ctime=3876148717
mtime=3876935094
<article>
#_result = far.ClearPluginCache (Param1, Param2)
#_
#_**Parameters:**
#_  Param1:  flags (currently "PLT_PATH")
#_  Param2:  string
#_
#_**Returns:**
#_  result:  boolean
#_
#_**Far API used:**
#_  PluginsControlV3, PCTL_CACHEFORGET
#_
#_@@@
#_
</article>
</node>
<node>
id=507
lv=2
dt=Text
nm=far.FindPlugin
ctime=3876937531
mtime=3877053602
<article>
#_plugin_handle = far.FindPlugin (Param1, Param2)
#_
#_**Parameters:**
#_  Param1:  flags
#_  Param2:  string (ModuleName) or integer (SysID), depending on Param1
#_
#_**Returns:**
#_  plugin_handle:  userdata, or nil
#_
#_**Far API used:**
#_  PluginsControlV3, PCTL_FINDPLUGIN
#_
#_@@@
#_
</article>
</node>
<node>
id=416
lv=2
dt=Text
nm=far.ForcedLoadPlugin
ctime=3851399307
mtime=3876935129
<article>
#_plugin_handle = far.ForcedLoadPlugin (Param1, Param2)
#_
#_**Parameters:**
#_  Param1:  flags
#_  Param2:  string
#_
#_**Returns:**
#_  plugin_handle:  userdata, or nil
#_
#_**Far API used:**
#_  PluginsControlV3, PCTL_FORCEDLOADPLUGIN
#_
#_@@@
#_
</article>
</node>
<node>
id=508
lv=2
dt=Text
nm=far.GetPluginInformation
ctime=3877053707
mtime=3877053959
<article>
#_Info = far.GetPluginInformation (Handle)
#_
#_**Parameters:**
#_  Handle:  userdata
#_
#_**Returns:**
#_  Info:    table, or nil
#_    ModuleName: string
#_    Flags:      flags
#_    PInfo:      table
#_      Flags:         flags
#_      DiskMenu:      table (array of strings)
#_      PluginMenu:    table (array of strings)
#_      PluginConfig:  table (array of strings)
#_      CommandPrefix: string, or nil
#_    GInfo:      table
#_      SysID:         integer
#_
#_**Far API used:**
#_  PluginsControlV3, PCTL_GETPLUGININFORMATION
#_
#_@@@
#_
</article>
</node>
<node>
id=506
lv=2
dt=Text
nm=far.GetPlugins
ctime=3876935307
mtime=3876935369
<article>
#_plugin_handles = far.GetPlugins ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  plugin_handles: table (array of plugin handles)
#_
#_**Far API used:**
#_  PluginsControlV3, PCTL_GETPLUGINS
#_
#_@@@
#_
</article>
</node>
<node>
id=417
lv=2
dt=Text
nm=far.LoadPlugin
ctime=3851399323
mtime=3876935198
<article>
#_plugin_handle = far.LoadPlugin (Param1, Param2)
#_
#_**Parameters:**
#_  Param1:  flags
#_  Param2:  string
#_
#_**Returns:**
#_  plugin_handle:  userdata, or nil
#_
#_**Far API used:**
#_  PluginsControlV3, PCTL_LOADPLUGIN
#_
#_@@@
#_
</article>
</node>
<node>
id=418
lv=2
dt=Text
nm=far.UnloadPlugin
ctime=3851399331
mtime=3876935254
<article>
#_result = far.UnloadPlugin (Handle)
#_
#_**Parameters:**
#_  Handle:  userdata
#_
#_**Returns:**
#_  result:  boolean
#_
#_**Far API used:**
#_  PluginsControlV3. PCTL_UNLOADPLUGIN
#_
#_@@@
#_
</article>
</node>
<node>
id=82
lv=1
dt=Text
nm=Far Standard Functions
<article>
</article>
</node>
<node>
id=494
lv=2
dt=Text
nm=far.CheckMask
ctime=3869370298
mtime=3869370719
<article>
#_Result = far.CheckMask (Mask, Flags)
#_
#_**Parameters:**
#_  Mask:  string
#_  Flags: flags (default=0)
#_
#_**Returns:**
#_  Result: boolean
#_
#_**Far API used:**
#_  ProcessName
#_
#_@@@
#_
</article>
</node>
<node>
id=2
lv=2
dt=Text
nm=far.CmpName
mtime=3869370731
<article>
#_Result = far.CmpName (Mask, Name, Flags)
#_
#_**Parameters:**
#_  Mask:  string
#_  Name:  string
#_  Flags: flags (default=0)
#_
#_**Returns:**
#_  Result: boolean
#_
#_**Far API used:**
#_  ProcessName
#_
#_@@@
#_
</article>
</node>
<node>
id=493
lv=2
dt=Text
nm=far.CmpNameList
ctime=3869369459
mtime=3869370740
<article>
#_Result = far.CmpNameList (Mask, Name, Flags)
#_
#_**Parameters:**
#_  Mask:  string
#_  Name:  string
#_  Flags: flags (default=0)
#_
#_**Returns:**
#_  Result: boolean
#_
#_**Far API used:**
#_  ProcessName
#_
#_@@@
#_
</article>
</node>
<node>
id=284
lv=2
dt=Text
nm=far.ConvertPath
ctime=3476911603
mtime=3480263797
<article>
#_Dest = far.ConvertPath (Src [, Mode])
#_
#_**Parameters:**
#_  Src:  string
#_  Mode: flag, or nil (default="CPM_FULL")
#_
#_**Returns:**
#_  Dest: string
#_
#_**Far API used:**
#_  FSF.ConvertPath
#_
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=3
lv=2
dt=Text
nm=far.CopyToClipboard
<article>
#_result = far.CopyToClipboard (str)
#_
#_**Parameters:**
#_  str: string
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  FSF.CopyToClipboard
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=495
lv=2
dt=Text
nm=far.GenerateName
ctime=3869370435
mtime=3869371040
<article>
#_Result = far.GenerateName (Mask, Name, Flags)
#_
#_**Parameters:**
#_  Mask:  string
#_  Name:  string
#_  Flags: flags (default=0)
#_
#_**Returns:**
#_  Result: string, or false
#_
#_**Far API used:**
#_  ProcessName
#_
#_@@@
#_
</article>
</node>
<node>
id=262
lv=2
dt=Text
nm=far.GetCurrentDirectory
<article>
#_CurDir = far.GetCurrentDirectory ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  CurDir: string
#_
#_**Far API used:**
#_  FSF.GetCurrentDirectory
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=56
lv=2
dt=Text
nm=far.GetFileOwner
<article>
#_result = far.GetFileOwner (Computer, Name)
#_
#_**Parameters:**
#_  Computer: string, or nil
#_  Name:     string
#_
#_**Returns:**
#_  result: string, or nil
#_
#_**Far API used:**
#_  FSF.GetFileOwner
#_
#_@@@
#_
</article>
</node>
<node>
id=59
lv=2
dt=Text
nm=far.GetNumberOfLinks
<article>
#_result = far.GetNumberOfLinks (Name)
#_
#_**Parameters:**
#_  Name: string
#_
#_**Returns:**
#_  result: integer
#_
#_**Far API used:**
#_  FSF.GetNumberOfLinks
#_
#_@@@
#_
</article>
</node>
<node>
id=199
lv=2
dt=Text
nm=far.GetPathRoot
<article>
#_Root = far.GetPathRoot (Path)
#_
#_**Parameters:**
#_  Path:  string
#_
#_**Returns:**
#_  Root: string
#_
#_**Far API used:**
#_  FSF.GetPathRoot
#_
#_@@@
#_
</article>
</node>
<node>
id=200
lv=2
dt=Text
nm=far.GetReparsePointInfo
<article>
#_Dest = far.GetReparsePointInfo (Src)
#_
#_**Parameters:**
#_  Src:  string
#_
#_**Returns:**
#_  Dest: string, or nil
#_
#_**Far API used:**
#_  FSF.GetReparsePointInfo
#_
#_@@@
#_
</article>
</node>
<node>
id=186
lv=2
dt=Text
nm=far.InputRecordToKey
mtime=3853777092
<article>
#_Key = far.InputRecordToKey (Input)
#_
#_**Parameters:**
#_  Input: table InputRecord
#_         (Field *EventType* is mandatory, other fields
#_         are optional. If some field is missing, the default
#_         value of 0/false is used, except for *RepeatCount*
#_         that defaults to 1).
#_
#_**Returns:**
#_  Key: integer
#_
#_**Far API used:**
#_  FSF.FarInputRecordToKey
#_
#_@@@
#_<lua> Links = { InputRecord="187.html", } </lua>
#_
</article>
</node>
<node>
id=63
lv=2
dt=Text
nm=far.KeyToName
<article>
#_Name = far.KeyToName (Key)
#_
#_**Parameters:**
#_  Key: integer
#_
#_**Returns:**
#_  Name: string, or nil
#_
#_**Far API used:**
#_  FSF.FarKeyToName
#_
#_@@@
#_
</article>
</node>
<node>
id=201
lv=2
dt=Text
nm=far.LIsAlpha
<article>
#_result = far.LIsAlpha (str)
#_
#_**Parameters:**
#_  str:  string (only its first character is tested)
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  FSF.LIsAlpha
#_
#_@@@
#_
</article>
</node>
<node>
id=202
lv=2
dt=Text
nm=far.LIsAlphanum
<article>
#_result = far.LIsAlphanum (str)
#_
#_**Parameters:**
#_  str:  string (only its first character is tested)
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  FSF.LIsAlphanum
#_
#_@@@
#_
</article>
</node>
<node>
id=203
lv=2
dt=Text
nm=far.LIsLower
<article>
#_result = far.LIsLower (str)
#_
#_**Parameters:**
#_  str:  string (only its first character is tested)
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  FSF.LIsLower
#_
#_@@@
#_
</article>
</node>
<node>
id=204
lv=2
dt=Text
nm=far.LIsUpper
<article>
#_result = far.LIsUpper (str)
#_
#_**Parameters:**
#_  str:  string (only its first character is tested)
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  FSF.LIsUpper
#_
#_@@@
#_
</article>
</node>
<node>
id=205
lv=2
dt=Text
nm=far.LLowerBuf
<article>
#_result = far.LLowerBuf (str)
#_
#_**Parameters:**
#_  str:    string
#_
#_**Returns:**
#_  result: string
#_
#_**Far API used:**
#_  FSF.LLowerBuf
#_
#_@@@
#_
</article>
</node>
<node>
id=188
lv=2
dt=Text
nm=far.LStricmp
<article>
#_result = far.LStricmp (str1, str2)
#_
#_**Parameters:**
#_  str1: string
#_  str2: string
#_
#_**Returns:**
#_  result: integer
#_
#_**Far API used:**
#_  FSF.LStricmp
#_
#_
</article>
</node>
<node>
id=189
lv=2
dt=Text
nm=far.LStrnicmp
<article>
#_result = far.LStrnicmp (str1, str2, num)
#_
#_**Parameters:**
#_  str1: string
#_  str2: string
#_  num : integer
#_
#_**Returns:**
#_  result: integer
#_
#_**Far API used:**
#_  FSF.LStrnicmp
#_
#_
</article>
</node>
<node>
id=206
lv=2
dt=Text
nm=far.LUpperBuf
<article>
#_result = far.LUpperBuf (str)
#_
#_**Parameters:**
#_  str:    string
#_
#_**Returns:**
#_  result: string
#_
#_**Far API used:**
#_  FSF.LUpperBuf
#_
#_@@@
#_
</article>
</node>
<node>
id=208
lv=2
dt=Text
nm=far.MkLink
mtime=3480263878
<article>
#_result = far.MkLink (Src, Dest, Flags)
#_
#_**Parameters:**
#_  Src:    string
#_  Dest:   string
#_  Flags:  flags combination
#_
#_**Returns:**
#_  result: boolean
#_
#_**Far API used:**
#_  FSF.MkLink
#_
#_@@@
#_
</article>
</node>
<node>
id=207
lv=2
dt=Text
nm=far.MkTemp
<article>
#_result = far.MkTemp ([prefix])
#_
#_**Parameters:**
#_  prefix: string, or nil
#_
#_**Returns:**
#_  result: string
#_
#_**Far API used:**
#_  FSF.MkTemp
#_
#_@@@
#_
</article>
</node>
<node>
id=504
lv=2
dt=Text
nm=far.NameToInputRecord
ctime=3873815146
mtime=3873815311
<article>
#_Record = far.NameToInputRecord (Name)
#_
#_**Parameters:**
#_  Name:   string
#_
#_**Returns:**
#_  Record: table InputRecord, or nil
#_er
#_
#_**Far API used:**
#_  FarNameToInputRecord
#_
#_@@@
#_<lua> Links = { InputRecord="187.html", } </lua>
#_
</article>
</node>
<node>
id=66
lv=2
dt=Text
nm=far.NameToKey
<article>
#_Key = far.NameToKey (Name)
#_
#_**Parameters:**
#_  Name: string
#_
#_**Returns:**
#_  Key: integer, or nil
#_
#_**Far API used:**
#_  FSF.FarNameToKey
#_
#_@@@
#_
</article>
</node>
<node>
id=67
lv=2
dt=Text
nm=far.PasteFromClipboard
<article>
#_result = far.PasteFromClipboard ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: string, or nil
#_
#_**Far API used:**
#_  FSF.PasteFromClipboard, FSF.DeleteBuffer
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=190
lv=2
dt=Text
nm=far.ProcessName
mtime=3869371075
<article>
#_Result = far.ProcessName (Op, Mask, Name, Flags)
#_
#_**Parameters:**
#_  Op:    flag (either of PN_CMPNAME, PN_CMPNAMELIST, PN_GENERATENAME, PN_CHECKMASK)
#_  Mask:  string
#_  Name:  string (ignored when Op==PN_CHECKMASK)
#_  Flags: flags (default=0)
#_
#_**Returns:**
#_  Result: boolean, or string.
#_          String is returned on success if Op==PN_GENERATENAME
#_
#_**Far API used:**
#_  ProcessName
#_
#_@@@
#_
</article>
</node>
<node>
id=211
lv=2
dt=Text
nm=far.RecursiveSearch
mtime=3853601704
<article>
#_far.RecursiveSearch (InitDir, Mask, UserFunc [, Flags [, ...]])
#_
#_**Parameters:**
#_  InitDir:  string
#_  Mask:     string
#_  UserFunc: function
#_  Flags:    flags
#_  ...:      additional arguments, any Lua values
#_
#_**Returns:**
#_  In case the search was stopped by *UserFunc*:  all values returned by *UserFunc*.
#_  In case no more files left:                  nothing.
#_  In case of error in *UserFunc*:                nothing.
#_
#_**Description:**
#_  On every file found, *UserFunc* is called with the following arguments passed to it:
#_      (1) a FindData table
#_      (2) the full pathname of the found file
#_      (3...) additional arguments (if any) that were passed to far.RecursiveSearch
#_
#_  If the 1-st return value of *UserFunc* is neither *false* nor *nil* then the search
#_  is stopped.
#_
#_**Far API used:**
#_  FarRecursiveSearch
#_
#_@@@
#_<lua> Links = { FindData="90.html" } </lua>
#_
</article>
</node>
<node>
id=209
lv=2
dt=Text
nm=far.TruncPathStr
<article>
#_result = far.TruncPathStr (Str, MaxLength)
#_
#_**Parameters:**
#_  Str:       string
#_  MaxLength: integer
#_
#_**Returns:**
#_  result:    string
#_
#_**Far API used:**
#_  FSF.TruncPathStr
#_
#_@@@
#_
</article>
</node>
<node>
id=210
lv=2
dt=Text
nm=far.TruncStr
<article>
#_result = far.TruncStr (Str, MaxLength)
#_
#_**Parameters:**
#_  Str:       string
#_  MaxLength: integer
#_
#_**Returns:**
#_  result:    string
#_
#_**Far API used:**
#_  FSF.TruncStr
#_
#_@@@
#_
</article>
</node>
<node>
id=335
lv=2
dt=Text
nm=far.XLat
ctime=3480362672
mtime=3856507931
<article>
#_result = far.XLat (Line, StartPos, EndPos, Flags)
#_
#_**Parameters:**
#_  Line:     string
#_  StartPos: integer (optional, default=1)
#_  EndPos:   integer (optional, default=Line:len())
#_  Flags:    flags
#_
#_**Returns:**
#_  result:   string, or nil
#_
#_**Far API used:**
#_  XLat
#_
#_@@@
#_
</article>
</node>
<node>
id=496
lv=1
dt=Text
nm=Far2L-specific  functions
ctime=3870880710
mtime=3870923343
<article>
</article>
</node>
<node>
id=453
lv=2
dt=Text
nm=far.BackgroundTask
ctime=3852954289
mtime=3852954473
<article>
#_far.BackgroundTask (Info, Started)
#_
#_**Parameters:**
#_  Info:     string
#_  Started:  boolean
#_
#_**Returns:**
#_  nothing
#_
#_**Far API used:**
#_  FSF.BackgroundTask
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=452
lv=2
dt=Text
nm=far.DispatchInterThreadCalls
ctime=3852954168
mtime=3852954258
<article>
#_result = DispatchInterThreadCalls()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result:  integer
#_
#_**Far API used:**
#_  FSF.DispatchInterThreadCalls
#_
#_
#_@@@
#_
</article>
</node>
<node>
id=451
lv=2
dt=Text
nm=far.DisplayNotification
ctime=3852953930
mtime=3852954119
<article>
#_far.DisplayNotification (action, object)
#_
#_**Parameters:**
#_  action:  string
#_  object:  string
#_
#_**Returns:**
#_  nothing
#_
#_**Far API used:**
#_  FSF.DisplayNotification
#_
#_@@@
#_
</article>
</node>
<node>
id=449
lv=2
dt=Text
nm=far.Execute
ctime=3852926106
mtime=3852926344
<article>
#_result = far.Execute (CmdStr, ExecFlags)
#_
#_**Parameters:**
#_  CmdStr:     string
#_  ExecFlags:  flags
#_
#_**Returns:**
#_  result:     integer
#_
#_**Far API used:**
#_  FSF.Execute
#_
#_@@@
#_
</article>
</node>
<node>
id=450
lv=2
dt=Text
nm=far.ExecuteLibrary
ctime=3852926114
mtime=3852926447
<article>
#_result = far.ExecuteLibrary (Library, Symbol, CmdStr, ExecFlags)
#_
#_**Parameters:**
#_  Library:    string
#_  Symbol:     string
#_  CmdStr:     string
#_  ExecFlags:  flags
#_
#_**Returns:**
#_  result:     integer
#_
#_**Far API used:**
#_  FSF.ExecuteLibrary
#_
#_@@@
#_
</article>
</node>
<node>
id=482
lv=2
dt=Text
nm=far.GetConfigDir
ctime=3864462591
mtime=3875703532
<article>
#_Dir = far.GetConfigDir()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  Dir: string
#_
#_**Description:**
#_  Returns the directory where Far2L and plugins keep their settings.
#_  Unless Far2L was launched with "-u <name>" parameter this function
#_  returns "$HOME/.config/far2l" (with $HOME expanded).
#_
#_@@@
#_
</article>
</node>
<node>
id=501
lv=2
dt=Text
nm=far.GetFileEncoding
ctime=3872013561
mtime=3875699045
<article>
#_codepage = far.GetFileEncoding (FileName)
#_
#_**Parameters:**
#_  FileName:   string
#_
#_**Returns:**
#_  codepage:   integer (or nil)
#_
#_**Note:**
#_  If Far2L was built with **-DUSEUCD=no** option then
#_  the detection accuracy would be greatly reduced.
#_
#_**Far API used:**
#_  FSF.GetFileEncoding
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=476
lv=2
dt=Text
nm=far.GetPluginId
ctime=3861778095
mtime=3861778166
<article>
#_PluginId = far.GetPluginId()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  PluginId: integer
#_
#_@@@
#_
</article>
</node>
<node>
id=459
lv=2
dt=Text
nm=far.Log
ctime=3853503608
mtime=3853503949
<article>
#_far.Log (message)
#_
#_**Parameters:**
#_  message : string
#_
#_**Returns:**
#_  nothing
#_
#_**Description:**
#_  Writes <message> into the file **$HOME/luafar_log.txt**
#_
#_@@@
#_
</article>
</node>
<node>
id=273
lv=1
dt=Text
nm=Regular expression functions
<article>
</article>
</node>
<node>
id=488
lv=2
dt=Text
nm=regex.exec, execW
ctime=3867734456
mtime=3867735676
<article>
#_from, to, offsets = regex.exec (s, pattern, [init], [cflags])
#_
#_**Parameters:**
#_  s       :  string
#_  pattern :  string
#_  init    :  integer (default=1; can be negative)
#_  cflags  :  string (any combination of 'i','m','o','s' and 'x')
#_
#_**Returns:**
#_  from    : integer
#_  to      : integer
#_  offsets : table - array of captures' offsets (there can be *false*
#_                    in place of captures not participated in the match)
#_
#_**Example:**
#_  If the whole match is at offsets 10,20 and substring matches are
#_  at offsets 12,14 and 16,19 then the function returns the following:
#_  10, 20, { 12,14,16,19 }.
#_
#_**Note:**
#_*regex.execW* receives its 1-st argument in UTF-32LE encoding.
#_
#_**Far API used:**
#_  RegExpControl
#_
#_@@@
#_<lua> Links = { RegExpControl="http://api.farmanager.com/ru/service_functions/regexpcontrol.html" } </lua>
#_
</article>
</node>
<node>
id=271
lv=2
dt=Text
nm=regex.find, findW
mtime=3867736301
<article>
#_from, to [,c1 [,c2]...] = regex.find (s, pattern, [init], [cflags])
#_
#_**Parameters:**
#_  s       :  string
#_  pattern :  string
#_  init    :  integer (default=1; can be negative)
#_  cflags  :  string (any combination of 'i','m','o','s' and 'x')
#_
#_**Returns:**
#_  from    : integer
#_  to      : integer
#_  c1,...  : strings (there can be *false* in place of captures
#_                     not participated in the match)
#_
#_**Description:**
#_  The function is similar to *string.find*, but differs from it
#_  by the meaning of its optional 4-th parameter:
#_  -- *cflags* : compilation flags;
#_
#_**Note:**
#_*regex.findW* receives its 1-st argument and returns captures in
#_UTF-32LE encoding.
#_
#_**Far API used:**
#_  RegExpControl
#_
#_@@@
#_<lua> Links = { RegExpControl="http://api.farmanager.com/ru/service_functions/regexpcontrol.html" } </lua>
#_
</article>
</node>
<node>
id=269
lv=2
dt=Text
nm=regex.gmatch, gmatchW
mtime=3867736328
<article>
#_for c1 [,c2 ...] in regex.gmatch (s, pattern [, cflags]) do
#_  ......
#_end
#_
#_**Parameters:**
#_  s       :  string
#_  pattern :  string
#_  cflags  :  string (any combination of 'i','m','o','s' and 'x')
#_
#_**Returns:**
#_  c1,...  :  strings (there can be *false* in place of captures
#_                     not participated in the match)
#_
#_**Description:**
#_  The function is API-compatible with *string.gmatch*, with the
#_  following extensions:
#_  -- *cflags* : optional 3-rd parameter: compilation flags;
#_
#_**Note:**
#_*regex.gmatchW* receives its 1-st argument and returns captures in
#_UTF-32LE encoding.
#_
#_**Far API used:**
#_  RegExpControl
#_
#_@@@
#_<lua> Links = { RegExpControl="http://api.farmanager.com/ru/service_functions/regexpcontrol.html" } </lua>
#_
</article>
</node>
<node>
id=270
lv=2
dt=Text
nm=regex.gsub, gsubW
mtime=3867736358
<article>
#_res, nmatch, nrep = regex.gsub (s, pattern, repl, [n], [cflags])
#_
#_**Parameters:**
#_  s:        string
#_  pattern:  string
#_  repl:     string, or table, or function
#_  n:        integer
#_  cflags:   string (any combination of 'i','m','o','s' and 'x')
#_
#_**Returns:**
#_  res:      string
#_  nmatch:   integer
#_  nrep:     integer
#_
#_**Description:**
#_  The function is API-compatible with *string.gsub*, with the
#_  following extensions:
#_  -- *cflags* : optional 5-th parameter: compilation flags;
#_  -- *nrep*   : 3-rd return value: number of replacements made;
#_
#_**Note:**
#_*regex.gsubW* receives its 1-st argument and returns captures in
#_UTF-32LE encoding.
#_
#_**Far API used:**
#_  RegExpControl
#_
#_@@@
#_<lua> Links = { RegExpControl="http://api.farmanager.com/ru/service_functions/regexpcontrol.html" } </lua>
#_
</article>
</node>
<node>
id=272
lv=2
dt=Text
nm=regex.match, matchW
mtime=3867736390
<article>
#_c1 [,c2]...] = regex.match (s, pattern, [init], [cflags])
#_
#_**Parameters:**
#_  s       :  string
#_  pattern :  string
#_  init    :  integer (default=1; can be negative)
#_  cflags  :  string (any combination of 'i','m','o','s' and 'x')
#_
#_**Returns:**
#_  c1,...  : strings (there can be *false* in place of captures
#_                     not participated in the match)
#_
#_**Description:**
#_  The function is API-compatible with *string.match*, with the
#_  following extensions:
#_  -- *cflags* : optional 4-th parameter: compilation flags;
#_
#_**Note:**
#_*regex.matchW* receives its 1-st argument and returns captures in
#_UTF-32LE encoding.
#_
#_**Far API used:**
#_  RegExpControl
#_
#_@@@
#_<lua> Links = { RegExpControl="http://api.farmanager.com/ru/service_functions/regexpcontrol.html" } </lua>
#_
</article>
</node>
<node>
id=483
lv=2
dt=Text
nm=regex.tfind, tfindW
ctime=3864718897
mtime=3867736447
<article>
#_from, to, tbl = regex.tfind (subj, pattern, [init], [cflags])
#_
#_**Parameters:**
#_  subj    :  string
#_  pattern :  string
#_  init    :  integer (default=1; can be negative)
#_  cflags  :  string (any combination of 'i','m','o','s' and 'x')
#_
#_**Returns on success:**
#_  from    : integer
#_  to      : integer
#_  tbl     : table (array of captures);
#_            (there can be *false* in place of captures not participated in the match)
#_
#_**Returns on failure:**
#_  nil
#_
#_**Note:**
#_*regex.tfindW* receives its 1-st argument and returns captures in
#_UTF-32LE encoding.
#_
#_**Far API used:**
#_  RegExpControl
#_
#_@@@
#_<lua> Links = { RegExpControl="http://api.farmanager.com/ru/service_functions/regexpcontrol.html" } </lua>
#_
</article>
</node>
<node>
id=266
lv=2
dt=Text
nm=regex.new
mtime=3867736171
<article>
#_regex_object = regex.new (pattern [, cflags])
#_
#_**Parameters:**
#_  pattern:      string
#_  cflags:       string (any combination of 'i','m','o','s' and 'x')
#_
#_**Returns:**
#_  regex_object: userdata
#_
#_**Description:**
#_  Compiles pattern into the internal form.
#_  Compilation flags can be specified in either of two ways:
#_    -- If the pattern is enclosed in '/' (forward slashes)
#_       then the flags can follow the trailing slash.
#_       In this case, the *cflags* parameter is ignored.
#_    -- Via the *cflags* parameter.
#_
#_**Object methods:**
#_  bracketscount, exec, find, gsub, match, tfind
#_
#_**Far API used:**
#_  RegExpControl
#_
#_@@@
#_<lua> Links = {
#_  bracketscount="377.html",
#_  exec="489.html";
#_  find="267.html",
#_  gsub="386.html";
#_  match="268.html",
#_  tfind="484.html";
#_  RegExpControl="http://api.farmanager.com/ru/service_functions/regexpcontrol.html",
#_} </lua>
#_
</article>
</node>
<node>
id=377
lv=3
dt=Text
nm=method bracketscount
ctime=3489988958
mtime=3867735907
<article>
#_count = regex_object:bracketscount ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  count : integer
#_
#_**Far API used:**
#_  RegExpControl
#_
#_@@@
#_<lua> Links = { RegExpControl="http://api.farmanager.com/ru/service_functions/regexpcontrol.html" } </lua>
#_
</article>
</node>
<node>
id=489
lv=3
dt=Text
nm=methods exec, execW
ctime=3867734783
mtime=3867736489
<article>
#_from, to, offsets = regex_object:exec (subj [, init])
#_
#_**Parameters:**
#_  subj   :  string
#_  init   :  integer (default=1; can be negative)
#_
#_**Returns:**
#_  from    : integer
#_  to      : integer
#_  offsets : table - array of captures' offsets (there can be *false*
#_                    in place of captures not participated in the match)
#_
#_**Example:**
#_  If the whole match is at offsets 10,20 and substring matches are
#_  at offsets 12,14 and 16,19 then the method returns the following:
#_  10, 20, { 12,14,16,19 }.
#_
#_**Note:**
#_*regex_object:execW* receives its 1-st argument in UTF-32LE encoding.
#_
#_**Far API used:**
#_  RegExpControl
#_
#_@@@
#_<lua> Links = { RegExpControl="http://api.farmanager.com/ru/service_functions/regexpcontrol.html" } </lua>
#_
</article>
</node>
<node>
id=267
lv=3
dt=Text
nm=methods find, findW
mtime=3867736527
<article>
#_from, to [,c1 [,c2]...] = regex_object:find (subj [, init])
#_
#_**Parameters:**
#_  subj   :  string
#_  init   :  integer (default=1; can be negative)
#_
#_**Returns:**
#_  from   : integer
#_  to     : integer
#_  c1,... : strings (there can be *false* in place of captures
#_                    not participated in the match)
#_
#_**Note:**
#_*regex_object:findW* receives its 1-st argument and returns captures
#_in UTF-32LE encoding.
#_
#_**Far API used:**
#_  RegExpControl
#_
#_@@@
#_<lua> Links = { RegExpControl="http://api.farmanager.com/ru/service_functions/regexpcontrol.html" } </lua>
#_
</article>
</node>
<node>
id=386
lv=3
dt=Text
nm=methods gsub, gsubW
ctime=3497976622
mtime=3867736556
<article>
#_res, nmatch, nrep = regex_object:gsub (s, repl, [n])
#_
#_**Parameters:**
#_  s:        string
#_  repl:     string, or table, or function
#_  n:        integer
#_
#_**Returns:**
#_  res:      string
#_  nmatch:   integer
#_  nrep:     integer
#_
#_**Note:**
#_*regex_object:gsubW* receives its 1-st argument and returns captures
#_in UTF-32LE encoding.
#_
#_**Far API used:**
#_  RegExpControl
#_
#_@@@
#_<lua> Links = { RegExpControl="http://api.farmanager.com/ru/service_functions/regexpcontrol.html" } </lua>
#_
</article>
</node>
<node>
id=268
lv=3
dt=Text
nm=methods match, matchW
mtime=3867736585
<article>
#_c1 [,c2 ...] = regex_object:match (subj [, init])
#_
#_**Parameters:**
#_  subj   :  string
#_  init   :  integer (default=1; can be negative)
#_
#_**Returns:**
#_  c1,... : strings (there can be *false* in place of captures
#_                    not participated in the match)
#_
#_**Note:**
#_*regex_object:matchW* receives its 1-st argument and returns captures
#_in UTF-32LE encoding.
#_
#_**Far API used:**
#_  RegExpControl
#_
#_@@@
#_<lua> Links = { RegExpControl="http://api.farmanager.com/ru/service_functions/regexpcontrol.html" } </lua>
#_
</article>
</node>
<node>
id=484
lv=3
dt=Text
nm=methods tfind, tfindW
ctime=3864719159
mtime=3867736618
<article>
#_from, to, tbl = regex_object:tfind (subj, [init])
#_
#_**Parameters:**
#_  subj    :  string
#_  init    :  integer (default=1; can be negative)
#_
#_**Returns on success:**
#_  from    : integer
#_  to      : integer
#_  tbl     : table (array of captures);
#_            (there can be *false* in place of captures not participated in the match)
#_
#_**Returns on failure:**
#_  nil
#_
#_**Note:**
#_*regex_object:tfindW* receives its 1-st argument and returns captures
#_in UTF-32LE encoding.
#_
#_**Far API used:**
#_  RegExpControl
#_
#_@@@
#_<lua> Links = { RegExpControl="http://api.farmanager.com/ru/service_functions/regexpcontrol.html" } </lua>
#_
</article>
</node>
<node>
id=83
lv=1
dt=Text
nm=Other functions
<article>
</article>
</node>
<node>
id=185
lv=2
dt=Text
nm=far.CPluginStartupInfo
<article>
#_Info = far.CPluginStartupInfo()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  Info: light userdata (a pointer to struct PluginStartupInfo)
#_
#_**Description:**
#_  The function gives access to Far Standard Functions (FSF)
#_  to DLL's other than the plugin DLL.
#_
#_@@@
#_int far_CPluginStartupInfo(lua_State *L)
#_{
#_  return lua_pushlightuserdata(L, (void*)GetPluginStartupInfo(L)), 1;
#_}
#_
</article>
</node>
<node>
id=461
lv=2
dt=Text
nm=far.InputRecordToName
ctime=3853775362
mtime=3853776891
<article>
#_Name = far.InputRecordToName(Rec)
#_
#_**Parameters:**
#_  Rec:  table InputRecord
#_
#_**Returns:**
#_  Name: string, or nil
#_
#_**Description:**
#_  The function returns a string representation of an InputRecord.
#_
#_**Note:**
#_  Currently, processing is only implemented for records of types
#_  *KEY_EVENT* and *FARMACRO_KEY_EVENT*.
#_
#_@@@
#_<lua> Links = { InputRecord="187.html" } </lua>
#_
</article>
</node>
<node>
id=191
lv=2
dt=Text
nm=far.LuafarVersion
mtime=3851360056
<article>
#_version = far.LuafarVersion ([mode])
#_
#_**Parameters:**
#_  mode   : boolean
#_
#_**Returns:**
#_  version: string, if mode==false;
#_           3 numbers (MAJOR,MINOR,MICRO), if mode==true;
#_
#_**Description:**
#_  Returns version of the LuaFAR library, e.g.:
#_    "1.2.3" - string representation, or
#_    1, 2, 3 - three number representation.
#_
#_**Notes:**
#_  1. LuaFAR versions prior to 1.0 did not have parameter *mode*.
#_  2. LuaFAR versions prior to 0.8 did not have this function.
#_
#_**Extra:**
#_  The version of Far SDK used *in building LuaFAR* can be
#_  determined as follows:
#_    local F = far.Flags
#_    far.Show(F.FARMANAGERVERSION_MAJOR, F.FARMANAGERVERSION_MINOR,
#_             F.FARMANAGERVERSION_BUILD)
#_
#_@@@
#_
</article>
</node>
<node>
id=280
lv=2
dt=Text
nm=far.MakeMenuItems
ctime=3476605549
mtime=3853248473
<article>
#_Items = far.MakeMenuItems (...)
#_
#_**Parameters:**
#_  Arbitrary number of arguments.
#_  Each argument may be of any Lua type.
#_
#_**Returns:**
#_  Items: table (array of tables)
#_           - each element is a table in the form
#_             { text=<string>, arg=<argument value> }
#_           - number of elements >= number of arguments, as one
#_             argument can have a multiple line representation.
#_
#_**Description:**
#_  This function returns representation of its arguments, suitable
#_  for passing to function `far.Menu` as its *Items* parameter.
#_
#_@@@
#_
</article>
</node>
<node>
id=68
lv=2
dt=Text
nm=far.PluginStartupInfo
mtime=3875448672
<article>
#_Info = far.PluginStartupInfo ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  Info: table
#_    fields of Info:
#_      ModuleName:   string
#_      ModuleDir:    string (no trailing slash)
#_      ShareDir:     string (no trailing slash)
#_      ModuleNumber: light userdata
#_      RootKey:      string
#_      PluginId:     number
#_
#_**Description:**
#_  Returns a table containing the data elements of the
#_  *PluginStartupInfo* struct that plugin obtains when FAR call its
#_  function *SetStartupInfo*.
#_
#_  *ModuleDir* is a directory containing the plugin's binary
#_  *ShareDir* is a directory containing the plugin's Lua scripts
#_
#_@@@
#_
</article>
</node>
<node>
id=282
lv=2
dt=Text
nm=far.Show
ctime=3476617735
mtime=3853248750
<article>
#_Item, Position = far.Show (...)
#_
#_**Parameters:**
#_  Arbitrary number of arguments.
#_  Each argument may be of any Lua type.
#_
#_**Returns:**
#_  Item, Position - same as in `far.Menu`.
#_
#_**Description:**
#_  This function shows representation of its arguments in a menu
#_  window. It is handy for displaying multiple values at once, or
#_  long multi-line strings.
#_
#_  The function calls `far.MakeMenuItems` internally, then `far.Menu`.
#_
#_  Due to using `far.MakeMenuItems` the returned *Item* table contains
#_  the value of the corresponding original argument under the field 'arg'.
#_
#_@@@
#_
</article>
</node>
<node>
id=346
lv=2
dt=Text
nm=far.Timer
ctime=3482124061
mtime=3853777127
<article>
#_timer = far.Timer (interval, handler)
#_
#_**Parameters:**
#_  interval : integer (milliseconds)
#_  handler  : function
#_
#_**Returns:**
#_  timer    : userdata (timer object), or nil
#_
#_**Description:**
#_  The function creates a periodic timer. Every time the next
#_  *interval* milliseconds are elapsed, the *handler* is called
#_  with the timer object as its argument.
#_
#_  The returned "timer object" can be used to query or modify
#_  the timer parameters. The object has an API similar to Delphi
#_  classes: properties, methods, events.
#_
#_**Notes:**
#_  1. *handler* can be called only when the plugin returns control
#_     to Far. Thus the real interval between *handler* calls is not
#_     exact and can significantly differ from the specified value.
#_
#_  2. The handler should take into account that at the moment it is
#_     called, the timer can already be closed. It can be found out
#_     by examining the *Closed* property of the timer.
#_
#_  3. This function requires that the plugin DLL has
#_     *ProcessSynchroEventW* exported.
#_
#_**Far API used:**
#_  AdvControl (ACTL_SYNCHRO), ProcessSynchroEventW.
#_
#_
#_@@@
#_<lua> Links = {
#_["export.ProcessSynchroEvent"]="319.html",
#_} </lua>
#_
#_
</article>
</node>
<node>
id=352
lv=3
dt=Text
nm=Properties
ctime=3482328762
mtime=3482328762
<article>
</article>
</node>
<node>
id=354
lv=4
dt=Text
nm=Closed
ctime=3482328782
mtime=3482491340
<article>
#_result = timer.Closed
#_
#_This is a read-only boolean property.
#_
</article>
</node>
<node>
id=350
lv=4
dt=Text
nm=Enabled
ctime=3482328603
mtime=3482345154
<article>
#_value = timer.Enabled
#_    or
#_timer.Enabled = value
#_
#_**Description:**
#_  This property is about calling the handler function. The timer
#_  continues to run even when not enabled, but the handler is not
#_  called. The initial value of this property is *true*.
#_  This is a read/write boolean property.
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=351
lv=4
dt=Text
nm=Interval
ctime=3482328655
mtime=3851879409
<article>
#_value = timer.Interval
#_    or
#_timer.Interval = value
#_
#_**Description:**
#_  Query or set the interval (in milliseconds) of the timer.
#_  This is a read/write integer property.
#_
#_**NOTE:**
#_  Currently *Interval* is a read-only property.
#_
#_@@@
#_
</article>
</node>
<node>
id=355
lv=3
dt=Text
nm=Methods
ctime=3482328881
mtime=3482328881
<article>
</article>
</node>
<node>
id=357
lv=4
dt=Text
nm=Close
ctime=3482328964
mtime=3482491377
<article>
#_timer:Close ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  nothing
#_
#_**Description:**
#_  Closes the timer.
#_
#_**Note:**
#_  A timer object is garbage-collected only when its lua_State closes,
#_  thus it is the application's responsibility to call the *Close*
#_  method when the timer is not needed anymore.
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=356
lv=3
dt=Text
nm=Events
ctime=3482328885
mtime=3482328885
<article>
</article>
</node>
<node>
id=353
lv=4
dt=Text
nm=OnTimer
ctime=3482328777
mtime=3482450614
<article>
#_handler = timer.OnTimer
#_    or
#_timer.OnTimer = handler
#_
#_**Description:**
#_  Query or set the timer handler function. The handler function
#_  is called with one argument: the timer object.
#_
#_
</article>
</node>
<node>
id=411
lv=1
dt=Text
nm=Tables
ctime=3851358133
mtime=3851358133
<article>
</article>
</node>
<node>
id=57
lv=2
dt=Text
nm=far.Flags
mtime=3853579897
<article>
#_far.Flags
#_
#_**Description:**
#_  A table containing values of various FAR and Windows console
#_  constants keyed by their string names. It includes constants
#_  defined in the following Far2L files:
#_  - farplug-wide.h
#_  - farcolor.h
#_  - farkeys.h
#_
#_**Example of use:**
#_  local F = far.Flags
#_  far.AdvControl ("ACTL_SETARRAYCOLOR",
#_      { Flags="FCLR_REDRAW", StartIndex=F.COL_EDITORTEXT,
#_        0x4E, 0xE4
#_      })
#_
#_**Example of use:**
#_  local F = far.Flags
#_  editor.ProcessKey (F.KEY_CTRLEND)
#_
</article>
</node>
<node>
id=427
lv=2
dt=Text
nm=far.Guids
ctime=3851421218
mtime=3851421394
<article>
#_far.Guids
#_
#_**Description:**
#_  A table containing GUIDs of various Far Manager dialogs.
#_
#_  GUIDs are given in upper-case text representation, e.g.
#_    FindFileId = '8C9EAD29-910F-4B24-A669-EDAFBA6ED964'
#_
#_@@@
#_
</article>
</node>
<node>
id=84
lv=1
dt=Text
nm="Structures"
<article>
</article>
</node>
<node>
id=314
lv=2
dt=Text
nm=Coord
ctime=3477138634
mtime=3477138672
<article>
#_**The table has the following fields:**
#_
#_  X   :  integer
#_  Y   :  integer
#_
</article>
</node>
<node>
id=295
lv=2
dt=Text
nm=FarDialogItem
ctime=3477054110
mtime=3492019028
<article>
#_<markdown>
#_**`FarDialogItem`** is a table (array)
#_
#_Fields of a dialog item:
#_
#_      [1]  Type:             integer, or string
#_      [2]  X1:               integer
#_      [3]  Y1:               integer
#_      [4]  X2:               integer
#_      [5]  Y2:               integer
#_      [6]  Focus:            integer
#_      [7]  Selected/History/ListItems: integer/string/table
#_             When table, its array part is a table per item:
#_               ListItems[i]:
#_                 Flags : flags combination
#_                 Text  : string
#_             Its hash part has a field:
#_               SelectIndex : integer
#_      [8]  Flags             flags combination
#_      [9]  DefaultButton:    integer
#_      [10] Data:             string
#_
#_
#_
</article>
</node>
<node>
id=293
lv=2
dt=Text
nm=FarListColors
ctime=3477043729
mtime=3477044041
<article>
#_<markdown>
#_**`FarListColors`** is a table with the following predefined fields:
#_
#_      Flags:  integer
#_
#_The array part of the table keeps integers, representing colors.
#_Color count can be obtained via the operator `#`.
#_
</article>
</node>
<node>
id=90
lv=2
dt=Text
nm=FindData
mtime=3854818424
<article>
#_<markdown>
#_**`FindData`** is a table with the following predefined fields:
#_
#_      FileAttributes:     string
#_      LastWriteTime:      number
#_      LastAccessTime:     number
#_      CreationTime:       number
#_      FileSize:           number
#_      PackSize:           number
#_      FileName:           string
#_      AlternateFileName:  string
#_
#_###Notes
#_
#_1. **`FileAttributes`** is a string of concatenated attribute
#_letters (see below). If a letter representing some attribute
#_is present in the string, that means the corresponding attribute
#_is set, otherwise it is not.
#_
#_          a - archive
#_          c - compressed
#_          d - directory
#_          e - reparse point
#_          h - hidden
#_          n - encrypted
#_          o - offline
#_          r - read only
#_          s - system file
#_          t - temporary
#_          v - virtual
#_
#_1. **`LastWriteTime`**, **`LastAccessTime`** and **`CreationTime`**
#_are values measured in number of milliseconds elapsed since
#_January 1, 1601.
#_
#_
</article>
</node>
<node>
id=120
lv=2
dt=Text
nm=InfoLine
<article>
#_<markdown>
#_**`InfoLine`** is a table with the following predefined fields:
#_
#_      Text: string
#_      Data: string
</article>
</node>
<node>
id=187
lv=2
dt=Text
nm=InputRecord
mtime=3873815429
<article>
#_This table is used in the functions:
#_editor.ProcessInput, editor.ReadInput,
#_far.InputRecordToKey, far.NameToInputRecord.
#_
#_**The table has the following fields:**
#_
#_  EventType:         integer, or string
#_
#_  *--if EventType is KEY_EVENT or FARMACRO_KEY_EVENT:*
#_  KeyDown:           boolean
#_  RepeatCount:       integer
#_  VirtualKeyCode:    integer
#_  VirtualScanCode:   integer
#_  UnicodeChar:       string
#_  ControlKeyState:   integer
#_
#_  *--if EventType is MOUSE_EVENT:*
#_  see MouseEventRecord
#_
#_  *--if EventType is WINDOW_BUFFER_SIZE_EVENT:*
#_  SizeX              integer
#_  SizeY              integer
#_
#_  *--if EventType is MENU_EVENT:*
#_  CommandId          integer
#_
#_  *--if EventType is FOCUS_EVENT:*
#_  SetFocus           boolean
#_
#_@@@
#_<lua> Links = {
#_  ['editor.ProcessInput']="36.html",
#_  ['editor.ReadInput']="38.html",
#_  ['far.InputRecordToKey']="186.html",
#_  ['far.NameToInputRecord']="504.html",
#_  MouseEventRecord="313.html",
#_} </lua>
#_
</article>
</node>
<node>
id=313
lv=2
dt=Text
nm=MouseEventRecord
ctime=3477138206
mtime=3851603641
<article>
#_**The table has the following fields:**
#_
#_  MousePositionX   :  integer
#_  MousePositionY   :  integer
#_  ButtonState      :  integer
#_  ControlKeyState  :  integer
#_  EventFlags       :  integer
#_
#_
</article>
</node>
<node>
id=121
lv=2
dt=Text
nm=PanelMode
<article>
#_<markdown>
#_**`PanelMode`** is a table with the following predefined fields:
#_
#_      ColumnTypes:        string
#_      ColumnWidths:       string
#_      FullScreen:         boolean
#_      DetailedStatus:     integer
#_      AlignExtensions:    integer
#_      CaseConversion:     boolean
#_      StatusColumnTypes:  string
#_      StatusColumnWidths: string
#_      ColumnTitles:       table (array of strings)
#_
#_
</article>
</node>
<node>
id=85
lv=2
dt=Text
nm=PluginPanelItem
mtime=3859629606
<article>
#_<markdown>
#_**`PluginPanelItem`** is a table with the following predefined fields:
#_
#_      LastWriteTime:      number
#_      LastAccessTime:     number
#_      CreationTime:       number
#_
#_      FileSize:           number
#_      PackSize:           number
#_
#_      FileName:           string
#_      AlternateFileName:  string
#_
#_      FileAttributes:     string
#_      Flags:              integer
#_      NumberOfLinks:      integer
#_      Description:        string
#_      Owner:              string
#_      CustomColumnData:   table, or nil
#_      UserData:           any Lua value
#_
#_@@@
#_<lua> Links = { FindData="90.html" } </lua>
#_
</article>
</node>
<node>
id=218
lv=2
dt=Text
nm=SystemTime
<article>
#_<markdown>
#_**`SystemTime`** is a table with the following predefined fields:
#_
#_      wYear:          number
#_      wMonth:         number
#_      wDayOfWeek:     number
#_      wDay:           number
#_      wHour:          number
#_      wMinute:        number
#_      wSecond:        number
#_      wMilliseconds:  number
#_
</article>
</node>
<node>
id=133
lv=2
dt=Text
nm=ViewerInfo.CurMode
<article>
#_<markdown>
#_**`ViewerInfo.CurMode`** is a table with the following predefined fields:
#_
#_      CodePage:       integer
#_      Wrap:           boolean
#_      WordWrap:       integer
#_      Hex:            boolean
#_
#_
</article>
</node>
<node>
id=404
lv=0
dt=Text
nm=Additional libraries
ctime=3851356343
mtime=3851357415
<article>
</article>
</node>
<node>
id=471
lv=1
dt=Text
nm=bit64
ctime=3507278228
mtime=3861560909
<article>
#_<markdown>
#_As Far 3.0 started to use 64-bit integer values ("flags") in its API, arose the need to represent and handle them from Lua. This is the role of **bit64** library.
#_
#_The library represents and accepts flags as either numbers or "64 bit integer" userdata. Values that fit in 53 bits can be represented in both ways. Greater values are always represented as userdata.
#_
#_Userdata values created by the library support the following operations (metamethods):<br>
#_`+`, `-`, `*`, `/`, `%`, `==`, `<`, `<=`, unary minus, `tonumber`.
#_
#_`__tostring` metamethod of "64-bit type" userdata returns an acceptable string representation that when passed to [`new`][new] will produce a value equal to the original one.
#_
#_The library has the following functions:
#_
#_* *`bnot`*    - gets a flag, returns a flag
#_* *`band`*    - gets multiple flags, returns a flag
#_* *`bor`*     - gets multiple flags, returns a flag
#_* *`bxor`*    - gets multiple flags, returns a flag
#_* *`lshift`*  - gets a flag and an integer, returns a flag
#_* *`rshift`*  - gets a flag and an integer, returns a flag
#_* *`arshift`* - gets a flag and an integer, returns a flag
#_* *`add`*     - gets multiple flags, returns a flag
#_* *`mul`*     - gets multiple flags, returns a flag
#_* *`sub`*     - gets 2 flags, returns a flag
#_* *`div`*     - gets 2 flags, returns a flag
#_* *`mod`*     - gets 2 flags, returns a flag
#_
#_The functions above always return a number if the result fits into 53 bits.
#_
#_* *`eq`*      - gets 2 flags, returns a boolean
#_* *`lt`*      - gets 2 flags, returns a boolean
#_* *`le`*      - gets 2 flags, returns a boolean
#_
#_The functions above are useful for comparisons where each operand may be either a "64 bit integer" type userdata or a number. They compare underlying 64-bit integers.
#_
#_* [*`new`*][new]   - gets a string, number or flag representation, returns a flag
#_* [*`type`*][type] - gets a value, returns a string (or nil)
#_
#_[new]: 473.html
#_[type]: 472.html
#_
#_
</article>
</node>
<node>
id=473
lv=2
dt=Text
nm=bit64.new
ctime=3553400683
mtime=3554816005
<article>
#_result = bit64.new (arg)
#_
#_**Parameters:**
#_  arg:     string, number or userdata
#_
#_**Returns:**
#_  result:  userdata, or nil
#_
#_**Description:**
#_
#_This function creates a new "64-bit int" type userdata from the input value.
#_
#_If *arg* is a string, it must be an acceptable string representation of
#_a 64-bit integer. The function returns *nil* if the input string can not
#_be converted.
#_
#_The string representation of an integer acceptable by the function must
#_have either the hexadecimal form
#_  **-?0[xX][0-9A-Fa-f]{1,16}**, e.g. "0x56DF5"
#_or the decimal form
#_  **-?[0-9]+**, e.g. "-234567".
#_
#_If *arg* is a number, it must fit in 53 bits, otherwise nil is returned.
#_
#_If *arg* is a "64-bit int" type userdata then a new userdata with the same
#_value is created and returned.
#_
#_
</article>
</node>
<node>
id=472
lv=2
dt=Text
nm=bit64.type
ctime=3553401501
mtime=3554959390
<article>
#_result = bit64.type (val)
#_
#_**Parameters:**
#_  val:    any type
#_
#_**Returns:**
#_  result: string, or nil
#_
#_**Description:**
#_
#_The function returns string *"64 bit integer"* if argument *val*
#_is a userdata of the type created by this library, otherwise nil
#_is returned.
#_
</article>
</node>
<node>
id=405
lv=1
dt=Text
nm=win
ctime=3851356361
mtime=3851357406
<article>
</article>
</node>
<node>
id=419
lv=2
dt=Text
nm=Files and directories
ctime=3851399749
mtime=3851399749
<article>
</article>
</node>
<node>
id=480
lv=3
dt=Text
nm=win.CopyFile
ctime=3863280268
mtime=3863280841
<article>
#_result = win.CopyFile (source, target [, fail_if_exists])
#_
#_**Parameters:**
#_  source:         string
#_  target:         string
#_  fail_if_exists: boolean (defaults to false)
#_
#_**Returns:**
#_  result:         true (or: nil, errormessage)
#_
#_**Notes:**
#_  1. The function is implemented using *fopen*, *fread*, *fwrite*, *fclose*.
#_  2. The function does not copy the attributes and times of the source file.
#_  3. If *source* and *target* point to the same file then this file may be destroyed.
#_
</article>
</node>
<node>
id=372
lv=3
dt=Text
nm=win.CreateDir
ctime=3488896876
mtime=3488897730
<article>
#_result = win.CreateDir (path [, tolerant])
#_
#_**Parameters:**
#_  path:     string
#_  tolerant: boolean (default=false)
#_
#_**Returns:**
#_  result:   true (or: nil, errormessage)
#_
#_**Description:**
#_  This function creates a directory specified by the *path*
#_  parameter. Nested directories can be created by a single
#_  call. If the target directory already exists, then the
#_  function returns true if the *tolerant* parameter is true.
#_
#_**Windows API used:**
#_  CreateDirectoryW
#_
#_@@@
#_
</article>
</node>
<node>
id=361
lv=3
dt=Text
nm=win.DeleteFile
ctime=3484575113
mtime=3484575728
<article>
#_result = win.DeleteFile (filename)
#_
#_**Parameters:**
#_  filename: string
#_
#_**Returns:**
#_  result:   true (or: nil, errormessage)
#_
#_**Windows API used:**
#_  DeleteFileW
#_
#_@@@
#_
</article>
</node>
<node>
id=436
lv=3
dt=Text
nm=win.GetCurrentDir
ctime=3852043928
mtime=3852044004
<article>
#_dir = win.GetCurrentDir ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  dir : string (or nil)
#_
#_**Linux API used:**
#_  getcwd
#_
</article>
</node>
<node>
id=398
lv=3
dt=Text
nm=win.GetDriveType
ctime=3504253206
mtime=3504253386
<article>
#_type = win.GetDriveType ([root])
#_
#_**Parameters:**
#_  root : string
#_
#_**Returns:**
#_  type : one of the following strings:
#_           "unknown type"
#_           "no root directory"
#_           "removable"
#_           "fixed"
#_           "remote"
#_           "cdrom"
#_           "ramdisk"
#_
#_**Windows API used:**
#_  GetDriveTypeW
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=460
lv=3
dt=Text
nm=win.GetFileAttr
ctime=3853601291
mtime=3853601761
<article>
#_attr = win.GetFileAttr (FileName)
#_
#_**Parameters:**
#_  FileName: string
#_
#_**Returns:**
#_  attr:     string (see FindData page), or nil
#_
#_**Windows API used:**
#_  GetFileAttributesW
#_
#_@@@
#_<lua> Links = { FindData="90.html" } </lua>
#_
</article>
</node>
<node>
id=213
lv=3
dt=Text
nm=win.GetFileInfo
<article>
#_<markdown>
#_    Info = win.GetFileInfo (FileName)
#_
#_###Parameters
#_   **`FileName`**:  string<br>
#_   A valid directory or path and filename, which can contain
#_   wildcard characters (`*` and `?`)
#_
#_###Returns
#_  **`Info`**: `FindData` table, or nil
#_
#_###Description
#_  This function provides information about the specified file.
#_  The same information can be obtained with `far.RecursiveSearch`
#_  function, but this function has simpler API and is much faster
#_  when single file data are needed.
#_
#_###Windows API used
#_  `FindFirstFile`, `FindClose`
#_
#_@@@
#_<lua>
#_Links = {
#_  FindData="90.html",
#_  ["far.RecursiveSearch"]="211.html"
#_}
#_</lua>
#_
</article>
</node>
<node>
id=362
lv=3
dt=Text
nm=win.MoveFile
ctime=3484575124
mtime=3484631380
<article>
#_result = win.MoveFile (source, target [, flags])
#_
#_**Parameters:**
#_  source:  string
#_  target:  string
#_  flags:   string (default = '')
#_             'c' = MOVEFILE_COPY_ALLOWED
#_             'd' = MOVEFILE_DELAY_UNTIL_REBOOT
#_             'r' = MOVEFILE_REPLACE_EXISTING
#_             'w' = MOVEFILE_WRITE_THROUGH
#_
#_**Returns:**
#_  result:  true (or: nil, errormessage)
#_
#_**Windows API used:**
#_  MoveFileExW
#_
#_@@@
#_
</article>
</node>
<node>
id=373
lv=3
dt=Text
nm=win.RemoveDir
ctime=3488896891
mtime=3488897675
<article>
#_result = win.RemoveDir (path)
#_
#_**Parameters:**
#_  path:   string
#_
#_**Returns:**
#_  result: true (or: nil, errormessage)
#_
#_**Windows API used:**
#_  RemoveDirectoryW
#_
#_@@@
#_
</article>
</node>
<node>
id=363
lv=3
dt=Text
nm=win.RenameFile
ctime=3484723553
mtime=3484723622
<article>
#_<markdown>
#_This function is an alias to [`win.MoveFile`](362.html).
#_
</article>
</node>
<node>
id=437
lv=3
dt=Text
nm=win.SetCurrentDir
ctime=3852044260
mtime=3852044309
<article>
#_result = win.SetCurrentDir (dir)
#_
#_**Parameters:**
#_  dir    : string 
#_
#_**Returns:**
#_  result : boolean
#_
#_**Linux API used:**
#_  chdir
#_
</article>
</node>
<node>
id=469
lv=3
dt=Text
nm=win.SetFileAttr
ctime=3861201377
mtime=3861201471
<article>
#_result = win.SetFileAttr (FileName, Attr)
#_
#_**Parameters:**
#_  FileName: string
#_  Attr:     string (see FindData page)
#_
#_**Returns:**
#_  result:   boolean
#_
#_**Windows API used:**
#_  SetFileAttributesW
#_
#_@@@
#_<lua> Links = { FindData="90.html" } </lua>
#_
</article>
</node>
<node>
id=421
lv=2
dt=Text
nm=Text related functions
ctime=3851399777
mtime=3851399777
<article>
</article>
</node>
<node>
id=274
lv=3
dt=Text
nm=win.CompareString
<article>
#_result = win.CompareString(s1, s2, [locale], [flags])
#_
#_**Parameters:**
#_  s1     : string
#_  s2     : string
#_  locale : string, or nil (default="u")
#_             either of:
#_               "s" (system default)
#_               "u" (user default)
#_               "n" (neutral)
#_  flags  : string, or nil (default="")
#_             any combination of characters:
#_               'c' =  NORM_IGNORECASE;
#_               'k' =  NORM_IGNOREKANATYPE;
#_               'n' =  NORM_IGNORENONSPACE;
#_               's' =  NORM_IGNORESYMBOLS;
#_               'w' =  NORM_IGNOREWIDTH;
#_               'S' =  SORT_STRINGSORT;
#_
#_**Returns:**
#_  result : integer (either of -1, 0, 1), or nil
#_
#_**Note:**
#_  The underlying function *CompareStringW* seems to behave as if
#_  flag NORM_IGNORECASE is always present, even if it is not.
#_
#_**Windows API used:**
#_  CompareStringW
#_
#_@@@
#_
</article>
</node>
<node>
id=394
lv=3
dt=Text
nm=win.EnumSystemCodePages
ctime=3500809326
mtime=3500809371
<article>
#_pages = win.EnumSystemCodePages ([supported])
#_
#_**Parameters:**
#_  supported : boolean
#_                false means CP_INSTALLED
#_                true  means CP_SUPPORTED
#_
#_**Returns:**
#_  pages     : table (array of strings), or nil + error message
#_
#_**Windows API used:**
#_  EnumSystemCodePagesW
#_
#_@@@
#_
</article>
</node>
<node>
id=391
lv=3
dt=Text
nm=win.GetACP
ctime=3500653631
mtime=3500653738
<article>
#_codepage = win.GetACP()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  codepage: integer
#_
#_**Windows API used:**
#_  GetACP
#_
#_@@@
#_
</article>
</node>
<node>
id=392
lv=3
dt=Text
nm=win.GetOEMCP
ctime=3500653643
mtime=3500653766
<article>
#_codepage = win.GetOEMCP()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  codepage: integer
#_
#_**Windows API used:**
#_  GetOEMCP
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=491
lv=3
dt=Text
nm=win.lenW
ctime=3867754214
mtime=3867754267
<article>
#_length = win.lenW (str)
#_
#_**Parameters:**
#_  str:    string
#_
#_**Returns:**
#_  length: integer
#_
#_**Description:**
#_  This function is similar to *string.len* except that it works on UTF-32LE strings
#_  and returns their lengths as  number of characters rather than bytes.
#_
</article>
</node>
<node>
id=370
lv=3
dt=Text
nm=win.MultiByteToWideChar
ctime=3487755325
mtime=3500869003
<article>
#_str_out = win.MultiByteToWideChar (str_in, codepage [, flags])
#_
#_**Parameters:**
#_  str_in   : string in multi-byte encoding
#_  codepage : integer
#_  flags    : string, a combination of 0 or more of the following
#_             characters:
#_               'p' -> MB_PRECOMPOSED
#_               'c' -> MB_COMPOSITE
#_               'e' -> MB_ERR_INVALID_CHARS
#_               'u' -> MB_USEGLYPHCHARS
#_
#_**Returns:**
#_  str_out  : string in wide character encoding, or nil+error message.
#_
#_**Windows API used:**
#_  MultiByteToWideChar
#_
#_@@@
#_
</article>
</node>
<node>
id=256
lv=3
dt=Text
nm=win.OemToUtf8
<article>
#_str_out = win.OemToUtf8 (str_in)
#_
#_**Parameters:**
#_  str_in  : string in OEM encoding
#_
#_**Returns:**
#_  str_out : string in UTF-8 encoding
#_
#_@@@
#_
</article>
</node>
<node>
id=492
lv=3
dt=Text
nm=win.subW
ctime=3867754224
mtime=3867754300
<article>
#_strOut = win.subW (str, from, to)
#_
#_**Parameters:**
#_  str:    string
#_  from:   integer (default = 1)
#_  to:     integer (default = -1)
#_
#_**Returns:**
#_  strOut: string
#_
#_**Description:**
#_  This function is similar to *string.sub* except that it works on UTF-32LE strings
#_  and considers arguments *from* and *to* expressed in characters rather than bytes.
#_
</article>
</node>
<node>
id=264
lv=3
dt=Text
nm=win.Utf32ToUtf8
mtime=3865959341
<article>
#_str_out = win.Utf32ToUtf8 (str_in)
#_
#_**Parameters:**
#_  str_in  : string in UTF-32 (little endian) encoding
#_
#_**Returns:**
#_  str_out : string in UTF-8 encoding
#_
#_@@@
#_
</article>
</node>
<node>
id=257
lv=3
dt=Text
nm=win.Utf8ToOem
<article>
#_str_out = win.Utf8ToOem (str_in)
#_
#_**Parameters:**
#_  str_in  : string in UTF-8 encoding
#_
#_**Returns:**
#_  str_out : string in OEM encoding
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=265
lv=3
dt=Text
nm=win.Utf8ToUtf32
mtime=3865959376
<article>
#_str_out = win.Utf8ToUtf32 (str_in)
#_
#_**Parameters:**
#_  str_in  : string in UTF-8 encoding
#_
#_**Returns:**
#_  str_out : string in UTF-32 (little endian) encoding
#_
#_@@@
#_
</article>
</node>
<node>
id=275
lv=3
dt=Text
nm=win.wcscmp
<article>
#_result = win.wcscmp(s1, s2 [, insens))
#_
#_**Parameters:**
#_  s1     : string
#_  s2     : string
#_  insens : boolean (defaults to *false*)
#_
#_**Returns:**
#_  result : integer (either of -1, 0, 1)
#_
#_**C API used:**
#_  wcscmp, wcsicmp
#_
#_@@@
#_
</article>
</node>
<node>
id=500
lv=3
dt=Text
nm=win.WideCharToMultiByte
ctime=3871827136
mtime=3871827165
<article>
#_str_out = win.WideCharToMultiByte (str_in, codepage [, flags])
#_
#_**Parameters:**
#_  str_in   : string in UTF-16LE encoding
#_  codepage : integer
#_  flags    : string, a combination of 0 or more of the following
#_             characters:
#_               'c' -> WC_COMPOSITECHECK
#_               'd' -> WC_DISCARDNS
#_               's' -> WC_SEPCHARS
#_               'f' -> WC_DEFAULTCHAR
#_
#_**Returns:**
#_  str_out  : string in *codepage* encoding.
#_
#_**Windows API used:**
#_  WideCharToMultiByte
#_
</article>
</node>
<node>
id=422
lv=2
dt=Text
nm=Time related functions
ctime=3851399790
mtime=3851399790
<article>
</article>
</node>
<node>
id=464
lv=3
dt=Text
nm=win.Clock
ctime=3854290368
mtime=3854291050
<article>
#_result = win.Clock ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result : number
#_
#_**Description:**
#_  The function returns value that is some quantity expressed
#_  in *seconds* and it usually has a fractional part.
#_
#_**Linux API used:**
#_  clock_gettime
#_
#_@@@
#_
</article>
</node>
<node>
id=465
lv=3
dt=Text
nm=win.FileTimeToLocalFileTime
ctime=3856361840
mtime=3856361940
<article>
#_local_ftime = win.FileTimeToLocalFileTime (ftime)
#_
#_**Parameters:**
#_  ftime       : number (number of milliseconds since January 1, 1601)
#_
#_**Returns:**
#_  local_ftime : number (number of milliseconds since January 1, 1601)
#_
#_**Windows API used:**
#_  FileTimeToLocalFileTime
#_
</article>
</node>
<node>
id=215
lv=3
dt=Text
nm=win.FileTimeToSystemTime
mtime=3853777145
<article>
#_result = win.FileTimeToSystemTime (filetime)
#_
#_**Parameters:**
#_  filetime : number
#_             (number of milliseconds since January 1, 1601)
#_
#_**Returns:**
#_  result   : table SystemTime, or nil
#_
#_**Windows API used:**
#_  FileTimeToSystemTime
#_
#_@@@
#_<lua> Links = { SystemTime="218.html" } </lua>
#_
#_
#_
</article>
</node>
<node>
id=503
lv=3
dt=Text
nm=win.GetSystemTime
ctime=3873304138
mtime=3873304348
<article>
#_result = win.GetSystemTime()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result   : table SystemTime
#_
#_**Windows API used:**
#_  GetSystemTime
#_
#_@@@
#_<lua> Links = { SystemTime="218.html" } </lua>
#_
#_
#_
</article>
</node>
<node>
id=217
lv=3
dt=Text
nm=win.GetSystemTimeAsFileTime
mtime=3856438297
<article>
#_result = win.GetSystemTimeAsFileTime()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result : number of milliseconds since January 1, 1601
#_
#_
#_**Windows API used:**
#_  GetSystemTimeAsFileTime
#_
#_@@@
#_<lua> Links = { SystemTime="218.html" } </lua>
#_
#_
</article>
</node>
<node>
id=216
lv=3
dt=Text
nm=win.SystemTimeToFileTime
mtime=3853777163
<article>
#_result = win.SystemTimeToFileTime (systemtime)
#_
#_**Parameters:**
#_  systemtime : table SystemTime (missing fields default to 0)
#_
#_**Returns:**
#_  result     : number, or nil
#_               (number of milliseconds since January 1, 1601)
#_
#_**Windows API used:**
#_  SystemTimeToFileTime
#_
#_@@@
#_<lua> Links = { SystemTime="218.html" } </lua>
#_
#_
</article>
</node>
<node>
id=423
lv=2
dt=Text
nm=Various functions
ctime=3851399805
mtime=3851399805
<article>
</article>
</node>
<node>
id=51
lv=3
dt=Text
nm=win.ExtractKey
<article>
#_result = win.ExtractKey ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: string, or nil
#_
#_**Description:**
#_  If a key was pressed, it is extracted, converted to a string and
#_  returned. Otherwise, a nil is returned.
#_
#_**Windows API used:**
#_  GetStdHandle, PeekConsoleInput, ReadConsoleInput
#_
#_@@@
#_
</article>
</node>
<node>
id=359
lv=3
dt=Text
nm=win.GetConsoleScreenBufferInfo
ctime=3483001149
mtime=3851603973
<article>
#_info = win.GetConsoleScreenBufferInfo ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  info : table, or nil
#_    fields of *info*:
#_      SizeX:               integer
#_      SizeY:               integer
#_      CursorPositionX:     integer
#_      CursorPositionY:     integer
#_      Attributes:          integer
#_      WindowLeft:          integer
#_      WindowTop:           integer
#_      WindowRight:         integer
#_      WindowBottom:        integer
#_      MaximumWindowSizeX:  integer
#_      MaximumWindowSizeY:  integer
#_
#_**Windows API used:**
#_  GetStdHandle(STD_OUTPUT_HANDLE), GetConsoleScreenBufferInfo
#_
#_@@@
#_
</article>
</node>
<node>
id=393
lv=3
dt=Text
nm=win.GetCPInfo
ctime=3500809281
mtime=3500809349
<article>
#_info = win.GetCPInfo (codepage)
#_
#_**Parameters:**
#_  codepage : integer
#_
#_**Returns:**
#_  info : table, or nil + error message
#_           fields of *info*:
#_             MaxCharSize        : integer
#_             DefaultChar        : string
#_             LeadByte           : string
#_             UnicodeDefaultChar : string
#_             CodePage           : integer
#_             CodePageName       : string
#_
#_**Windows API used:**
#_  GetCPInfoExW
#_
#_@@@
#_
</article>
</node>
<node>
id=152
lv=3
dt=Text
nm=win.GetEnv
<article>
#_result = win.GetEnv (var)
#_
#_**Parameters:**
#_  var:  string
#_
#_**Returns:**
#_  result: string, or nil
#_
#_**Description:**
#_  Use this instead of os.getenv, since the latter
#_  does not always work correctly. 
#_
#_@@@
#_
</article>
</node>
<node>
id=315
lv=3
dt=Text
nm=win.GetVirtualKeys
ctime=3477369087
mtime=3851368689
<article>
#_vkeys = win.GetVirtualKeys ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  vkeys: table
#_
#_**Description:**
#_  Returns a table containing values of virtual key codes keyed by
#_  their string names (and vice versa). The prefix VK_ is stripped
#_  from the names, so VK_LBUTTON is represented as "LBUTTON", etc.
#_
#_**Example:**
#_  local vk = win.GetVirtualKeys()
#_  far.Message(vk.ESCAPE) --> 27
#_  far.Message(vk[27])    --> ESCAPE
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=456
lv=3
dt=Text
nm=win.IsProcess64bit
ctime=3853330590
mtime=3853330626
<article>
#_result = win.IsProcess64bit ()
#_
#_**Parameters:**
#_  none
#_
#_**Returns:**
#_  result: boolean
#_
#_**Description:**
#_  Returns **true** if called from FAR x64, **false** otherwise.
#_
</article>
</node>
<node>
id=192
lv=3
dt=Text
nm=win.SetEnv
<article>
#_result = win.SetEnv (var [,value])
#_
#_**Parameters:**
#_  var  :  string
#_  value:  string, or nil
#_
#_**Returns:**
#_  result: boolean
#_
#_**Description:**
#_  This function sets or deletes a given environment variable.
#_
#_@@@
#_
</article>
</node>
<node>
id=435
lv=3
dt=Text
nm=win.Sleep
ctime=3852040835
mtime=3852040910
<article>
#_win.Sleep (milliseconds)
#_
#_**Parameters:**
#_  milliseconds: number
#_
#_**Returns:**
#_  nothing
#_
#_**Linux API used:**
#_  usleep
#_
</article>
</node>
<node>
id=424
lv=3
dt=Text
nm=win.Uuid
ctime=3851400447
mtime=3851400466
<article>
#_There are 3 actions available, depending on arguments.
#_All arguments and return values are strings.
#_
#_**ret = win.Uuid ()**
#_  Generate a new (binary) UUID
#_
#_**ret = win.Uuid (binUUID)**
#_  Convert a UUID to string representation
#_
#_**ret = win.Uuid (strUUID)**
#_  Convert a string UUID representation to binary
#_
#_
#_**Note:**
#_If the function is given a string argument, it checks its length.
#_When the length is 16, the function makes conversion from binary
#_to string GUID representation, otherwise it tries to convert from
#_string GUID representation to binary one.
#_
</article>
</node>
<node>
id=406
lv=1
dt=Text
nm=luautf8
ctime=3851357353
mtime=3851357555
<article>
#_<markdown>
#_
#_UTF-8 module for Lua 5.x
#_========================
#_This module adds UTF-8 support to Lua.
#_
#_It use data extracted from
#_[Unicode Character Database](http://www.unicode.org/reports/tr44/),
#_and tested on Lua 5.2.3, Lua 5.3.0 and LuaJIT.
#_
#_parseucd.lua is a pure Lua script generate unidata.h, to support convert
#_characters and check characters' category.
#_
#_It mainly used to compatible with Lua's own string module, it passed all
#_string and pattern matching test in lua test suite[2].
#_
#_It also add some useful routines against UTF-8 features, some like:
#_- a convenient interface to escape Unicode sequence in string. 
#_- string insert/remove, since UTF-8 substring extract may expensive.
#_- calculate Unicode width, useful when implement e.g. console emulator.
#_- a useful interface to translate Unicode offset and byte offset.
#_
#_Note that to avoid conflict with the Lua5.3's buitin library 'utf8',
#_this library produce a file like lua-utf8.dll or lua-utf8.so. so use
#_it like this:
#_
#_```lua
#_local utf8 = require 'lua-utf8'
#_```
#_
#_in your codes :-(
#_
#_[2]: http://www.lua.org/tests/5.2/
#_
#_
#_LuaRocks Installation
#_---------------------
#_`luarocks install luautf8`
#_
#_It's now full-compatible with Lua5.3's utf8 library, so replace this
#_file (and headers) with lua5.3 source's lutf8lib.c is also okay.
#_
#_Usage
#_-----
#_
#_Many routines are same as Lua's string module:
#_- `utf8.byte`
#_- `utf8.char`
#_- `utf8.find`
#_- `utf8.gmatch`
#_- `utf8.gsub`
#_- `utf8.len`
#_- `utf8.lower`
#_- `utf8.match`
#_- `utf8.reverse`
#_- `utf8.sub`
#_- `utf8.upper`
#_
#_The document of these functions can be find in Lua manual[3].
#_
#_[3]: http://www.lua.org/manual/5.2/manual.html#6.4
#_
#_
#_Some routines in string module needn't support Unicode:
#_- `string.dump`
#_- `string.format`
#_- `string.rep`
#_
#_They are NOT in utf8 module.
#_
#_Some routines are the compatible for Lua 5.3's basic UTF-8 support
#_library:
#_- `utf8.offset`
#_- `utf8.codepoint`
#_- `utf8.codes`
#_
#_See Lua5.3's manual to get usage.
#_
#_Some routines are new, with some Unicode-spec functions:
#_
#_### utf8.escape(str) -> utf8 string
#_escape a str to UTF-8 format string. It support several escape format:
#_
#_ * `%ddd` - which ddd is a decimal number at any length:
#_   change Unicode code point to UTF-8 format.
#_ * `%{ddd}` - same as `%nnn` but has bracket around.
#_ * `%uddd` - same as `%ddd`, u stands Unicode
#_ * `%u{ddd}` - same as `%{ddd}`
#_ * `%xhhh` - hexadigit version of `%ddd`
#_ * `%x{hhh}` same as `%xhhh`.
#_ * `%?` - '?' stands for any other character: escape this character.
#_
#_#### Examples:
#_```lua
#_local u = utf8.escape
#_print(u"%123%u123%{123}%u{123}%xABC%x{ABC}")
#_print(u"%%123%?%d%%u")
#_```
#_
#_### utf8.charpos(s[[, charpos], index]) -> charpos, code point
#_convert UTF-8 position to byte offset.
#_if only `index` is given, return byte offset of this UTF-8 char index.
#_if both `charpos` and `index` is given, a new `charpos` will be
#_calculated, by add/subtract UTF-8 char `index` to current `charpos`.
#_in all cases, it returns a new char position, and code point (a
#_number) at this position.
#_
#_### utf8.next(s[, charpos[, index]]) -> charpos, code point
#_iterate though the UTF-8 string s.
#_If only s is given, it can used as a iterator:
#_```lua
#_for pos, code in utf8.next, "utf8-string" do
#_   -- ...
#_end
#_```
#_if only `charpos` is given, return the next byte offset of in string.
#_if `charpos` and `index` is given, a new `charpos` will be calculated, by
#_add/subtract UTF-8 char offset to current charpos.
#_in all case, it return a new char position (in bytes), and code point
#_(a number) at this position.
#_
#_### utf8.insert(s[, idx], substring) -> new_string
#_insert a substring to s. If idx is given, insert substring before char at
#_this index, otherwise substring will concat to s. idx can be negative.
#_
#_
#_### utf8.remove(s[, start[, stop]]) -> new_string
#_delete a substring in s. If neither start nor stop is given, delete the
#_last UTF-8 char in s, otherwise delete char from start to end of s. if
#_stop is given, delete char from start to stop (include start and stop).
#_start and stop can be negative.
#_
#_
#_### utf8.width(s[, ambi_is_double[, default_width]]) -> width
#_calculate the width of UTF-8 string s. if ambi_is_double is given, the
#_ambiguous width character's width is 2, otherwise it's 1.
#_fullwidth/doublewidth character's width is 2, and other character's width
#_is 1.
#_if default_width is given, it will be the width of unprintable character,
#_used display a non-character mark for these characters.
#_if s is a code point, return the width of this code point.
#_
#_
#_### utf8.widthindex(s, location[, ambi_is_double[, default_width]]) -> idx, offset, width
#_return the character index at given location in string s. this is a
#_reverse operation of utf8.width().
#_this function return a index of location, and a offset in in UTF-8
#_encoding. e.g. if cursor is at the second column (middle) of the wide
#_char, offset will be 2. the width of character at idx is returned, also.
#_
#_
#_### utf8.title(s) -> new_string
#_### utf8.fold(s) -> new_string
#_convert UTF-8 string s to title-case, or folded case used to compare by
#_ignore case.
#_if s is a number, it's treat as a code point and return a convert code
#_point (number). utf8.lower/utf8.upper has the same extension.
#_
#_
#_### utf8.ncasecmp(a, b) -> [-1,0,1]
#_compare a and b without case, -1 means a < b, 0 means a == b and 1 means a > b.
#_
#_
#_Improvement needed
#_------------------
#_
#_- add Lua 5.3 spec test-suite.
#_- more test case.
#_- grapheme-compose support, and affect in utf8.reverse and utf8.width
#_- Unicode normalize algorithm implement.
#_
#_
#_License
#_-------
#_It use same license with Lua: http://www.lua.org/license.html
#_
</article>
</node>
<node>
id=407
lv=2
dt=Text
nm=utf8.dump
ctime=3851357426
mtime=3851357582
<article>
#_**Note:**
#_  This is an added function, not present in the original luautf8 library.
#_  See `string.dump` for reference.
#_
#_@@@
#_[string.dump]: http://www.lua.org/manual/5.1/manual.html#pdf-string.dump
#_
</article>
</node>
<node>
id=408
lv=2
dt=Text
nm=utf8.format
ctime=3851357445
mtime=3851357597
<article>
#_**Note:**
#_  This is an added function, not present in the original luautf8 library.
#_  See `string.format` for reference.
#_
#_@@@
#_[string.format]: http://www.lua.org/manual/5.1/manual.html#pdf-string.format
#_
</article>
</node>
<node>
id=409
lv=2
dt=Text
nm=utf8.rep
ctime=3851357454
mtime=3851357605
<article>
#_**Note:**
#_  This is an added function, not present in the original luautf8 library.
#_  See `string.rep` for reference.
#_
#_@@@
#_[string.rep]: http://www.lua.org/manual/5.1/manual.html#pdf-string.rep
#_
</article>
</node>
<node>
id=410
lv=2
dt=Text
nm=utf8.utf8valid
ctime=3851357461
mtime=3851357620
<article>
#_result, len = utf8.utf8valid (str)
#_    or
#_result, len = str:utf8valid ()
#_
#_**Parameters:**
#_  str:     string
#_
#_**Returns:**
#_  result:  boolean
#_  len:     integer
#_
#_**Description:**
#_  This function tests whether the entire input string is valid UTF-8.
#_  If it is, the function returns *true* followed by the string length in characters.
#_  Otherwise, the function returns *false* followed by the number of valid UTF-8
#_  characters preceded the first invalid one.
#_
#_**Note:**
#_  This is an added function, not present in the original **luautf8** library.
#_
</article>
</node>
<node>
id=128
lv=0
dt=Text
nm=LuaFAR C-interface
<article>
</article>
</node>
<node>
id=183
lv=1
dt=Text
nm=Mediator functions
<article>
#_<markdown>
#_Functions in this sections act as mediators between the plugin's
#_exported functions and their counterparts written in Lua.
#_
#_When FAR calls an exported function, the latter in turn calls
#_a mediator passing it a Lua State pointer as the first argument,
#_followed by all the arguments it received from FAR.
#_
#_The mediator then calls a corresponding Lua function, passing it
#_the arguments converted to their Lua equivalents, receives return
#_value(s) from Lua, converts them to their C equivalents and returns
#_them to its caller (the exported function).
#_
#_#### Example:
#_1) FAR calls the exported function `OpenPlugin`:<br>
#_`HANDLE OpenPlugin (int OpenFrom, int Item)`
#_
#_2) `OpenPlugin` calls the mediator function [`LF_OpenPlugin`](173.html):<br>
#_`HANDLE LF_OpenPlugin (lua_State* L, int OpenFrom, int Item)`
#_
#_3) `LF_OpenPlugin` calls the Lua function [`export.OpenPlugin`](109.html):<br>
#_`export.OpenPlugin (OpenFrom, Item)`
#_
#_
</article>
</node>
<node>
id=158
lv=2
dt=Text
nm=LF_ClosePlugin
mtime=3480187996
<article>
#_<markdown>
#_    void LF_ClosePlugin(lua_State* L, HANDLE hPlugin)
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_
#_#### Returns:
#_      nothing
#_
#_#### Description:
#_
#_If Lua function [`export.ClosePlugin`](94.html) exists, it is called.
#_Then, the resources associated with the plugin are freed.
#_
#_@@@
#_
</article>
</node>
<node>
id=159
lv=2
dt=Text
nm=LF_Compare
mtime=3480188012
<article>
#_<markdown>
#_    int LF_Compare(
#_        lua_State* L,
#_        HANDLE hPlugin,
#_        const PluginPanelItem *Item1,
#_        const PluginPanelItem *Item2,
#_        unsigned int Mode)
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_      ....
#_
#_#### Returns:
#_      comparison result
#_
#_#### Description:
#_
#_If Lua function [`export.Compare`](95.html) exists, it is called,
#_else `-2` is returned (directing to use the default FAR compare
#_function).
#_
#_@@@
#_
</article>
</node>
<node>
id=160
lv=2
dt=Text
nm=LF_Configure
mtime=3480188026
<article>
#_<markdown>
#_    int LF_Configure(lua_State* L, int ItemNumber)
#_
#_#### Parameters:
#_      L:       Lua state
#_      ....
#_
#_#### Returns:
#_      a boolean (success or failure)
#_
#_#### Description:
#_
#_If Lua function [`export.Configure`](96.html) exists, it is called,
#_else `FALSE` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=161
lv=2
dt=Text
nm=LF_DeleteFiles
mtime=3480188042
<article>
#_<markdown>
#_    int LF_DeleteFiles(
#_        lua_State* L,
#_        HANDLE hPlugin,
#_        PluginPanelItem *PanelItem,
#_        int ItemsNumber,
#_        int OpMode)
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_      ....
#_
#_#### Returns:
#_      a boolean (success or failure)
#_
#_#### Description:
#_
#_If Lua function [`export.DeleteFiles`](97.html) exists, it is called,
#_else `FALSE` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=162
lv=2
dt=Text
nm=LF_ExitFAR
mtime=3480188177
<article>
#_<markdown>
#_    void LF_ExitFAR(lua_State* L)
#_
#_#### Parameters:
#_      L:       Lua state
#_
#_#### Returns:
#_      nothing
#_
#_#### Description:
#_
#_First, the acquired resources are freed. Then, if Lua function [`export.ExitFAR`](98.html) exists, it is called.
#_
#_@@@
#_
</article>
</node>
<node>
id=368
lv=2
dt=Text
nm=LF_FreeCustomData
ctime=3485769061
mtime=3485769185
<article>
#_<markdown>
#_    void LF_FreeCustomData(
#_        lua_State* L,
#_        wchar_t* CustomData)
#_
#_#### Parameters:
#_      L:       Lua state
#_      ....
#_
#_#### Returns:
#_      nothing
#_
#_#### Description:
#_
#_No Lua function is called. LuaFAR frees the "custom data" internally.
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=163
lv=2
dt=Text
nm=LF_FreeFindData
mtime=3480187835
<article>
#_<markdown>
#_    void LF_FreeFindData(
#_        lua_State* L,
#_        HANDLE hPlugin,
#_        PluginPanelItem *PanelItems,
#_        int ItemsNumber)
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_      ....
#_
#_#### Returns:
#_      nothing
#_
#_#### Description:
#_
#_No Lua function is called. LuaFAR frees the "find data" internally.
#_
#_@@@
#_
</article>
</node>
<node>
id=164
lv=2
dt=Text
nm=LF_FreeVirtualFindData
mtime=3480187899
<article>
#_<markdown>
#_    void LF_FreeVirtualFindData(
#_        lua_State* L,
#_        HANDLE hPlugin,
#_        PluginPanelItem *PanelItems,
#_        int ItemsNumber)
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_      ....
#_
#_#### Returns:
#_      nothing
#_
#_#### Description:
#_
#_No Lua function is called. LuaFAR frees the "virtual find data"
#_internally.
#_
#_@@@
#_
</article>
</node>
<node>
id=366
lv=2
dt=Text
nm=LF_GetCustomData
ctime=3485766195
mtime=3485768994
<article>
#_<markdown>
#_    int LF_GetCustomData(
#_        lua_State* L, const wchar_t *FilePath, wchar_t **CustomData)
#_
#_#### Parameters:
#_      L:       Lua state
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_If Lua function [`export.GetCustomData`](364.html) exists, it is called,
#_else `0` is returned.
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=165
lv=2
dt=Text
nm=LF_GetFiles
mtime=3480187923
<article>
#_<markdown>
#_    int LF_GetFiles(
#_        lua_State* L,
#_        HANDLE hPlugin,
#_        PluginPanelItem *PanelItem,
#_        int ItemsNumber,
#_        int Move,
#_        const wchar_t **DestPath,
#_        int OpMode)
#_
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_If Lua function [`export.GetFiles`](101.html) exists, it is called,
#_else `0` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=166
lv=2
dt=Text
nm=LF_GetFindData
mtime=3480187787
<article>
#_<markdown>
#_    int LF_GetFindData(
#_        lua_State* L,
#_        HANDLE hPlugin,
#_        PluginPanelItem **pPanelItem,
#_        int *pItemsNumber,
#_        int OpMode)
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_If Lua function [`export.GetFindData`](102.html) exists,
#_it is called, else `FALSE` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=168
lv=2
dt=Text
nm=LF_GetOpenPluginInfo
mtime=3480187959
<article>
#_<markdown>
#_    void LF_GetOpenPluginInfo(
#_        lua_State* L,
#_        HANDLE hPlugin,
#_        OpenPluginInfo *aInfo)
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_      ....
#_
#_#### Returns:
#_      nothing
#_
#_#### Description:
#_If Lua function [`export.GetOpenPluginInfo`](104.html) exists, it is called.
#_
#_@@@
#_
</article>
</node>
<node>
id=169
lv=2
dt=Text
nm=LF_GetPluginInfo
mtime=3480188198
<article>
#_<markdown>
#_    void LF_GetPluginInfo(lua_State* L, PluginInfo *PI)
#_
#_#### Parameters:
#_      L:       Lua state
#_      PI:      Pointer to a PluginInfo struct
#_
#_#### Returns:
#_      nothing
#_
#_#### Description:
#_
#_If Lua function [`export.GetPluginInfo`](105.html) exists, it is called.
#_
#_@@@
#_
</article>
</node>
<node>
id=170
lv=2
dt=Text
nm=LF_GetVirtualFindData
mtime=3480187862
<article>
#_<markdown>
#_    int LF_GetVirtualFindData(
#_        lua_State* L,
#_        HANDLE hPlugin,
#_        PluginPanelItem **pPanelItem,
#_        int *pItemsNumber,
#_        const wchar_t *Path)
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_If Lua function [`export.GetVirtualFindData`](106.html) exists,
#_it is called, else `FALSE` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=171
lv=2
dt=Text
nm=LF_MakeDirectory
mtime=3480188058
<article>
#_<markdown>
#_    int LF_MakeDirectory(
#_        lua_State* L,
#_        HANDLE hPlugin,
#_        const wchar_t **Name,
#_        int OpMode)
#_
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_
#_If Lua function [`export.MakeDirectory`](107.html) exists, it is called.
#_
#_@@@
#_
</article>
</node>
<node>
id=448
lv=2
dt=Text
nm=LF_MayExitFAR
ctime=3852533773
mtime=3852533888
<article>
#_<markdown>
#_    int LF_MayExitFAR(lua_State* L)
#_
#_#### Parameters:
#_      L:       Lua state
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_
#_If Lua function [`export.MayExitFAR`](447.html) exists, it is called.
#_
#_@@@
#_
</article>
</node>
<node>
id=172
lv=2
dt=Text
nm=LF_OpenFilePlugin
<article>
#_HANDLE LF_OpenFilePlugin(lua_State* L, const wchar_t *aName,
#_  const unsigned char *aData, int aDataSize, int aOpMode)
#_<markdown>
#_    HANDLE LF_OpenFilePlugin(
#_        lua_State* L,
#_        const wchar_t *aName,
#_        const unsigned char *aData,
#_        int aDataSize,
#_        int aOpMode)
#_
#_#### Parameters:
#_      L:       Lua state
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_
#_If `far.ReloadDefaultScript` is true, then the function runs
#_the default script (see [`LF_RunDefaultScript`](130.html)).
#_Then, if Lua function [`export.OpenFilePlugin`](108.html) exists,
#_it is called. Else, `INVALID_HANDLE_VALUE` is returned to FAR.
#_
#_@@@
#_
</article>
</node>
<node>
id=173
lv=2
dt=Text
nm=LF_OpenPlugin
mtime=3480187978
<article>
#_<markdown>
#_    HANDLE LF_OpenPlugin(
#_        lua_State* L,
#_        int OpenFrom,
#_        int Item)
#_
#_#### Parameters:
#_      L:       Lua state
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_If `far.ReloadDefaultScript` is true, then the function runs
#_the default script (see [`LF_RunDefaultScript`](130.html)).
#_Then, if Lua function [`export.OpenPlugin`](109.html) exists,
#_it is called. Else, `INVALID_HANDLE_VALUE` is returned to FAR.
#_
#_@@@
#_
</article>
</node>
<node>
id=222
lv=2
dt=Text
nm=LF_ProcessDialogEvent
mtime=3480188287
<article>
#_<markdown>
#_    int LF_ProcessDialogEvent (
#_        lua_State* L,
#_        int Event,
#_        void* Param)
#_
#_#### Parameters:
#_      L:       Lua state
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_
#_If Lua function [`export.ProcessDialogEvent`](221.html) exists, it is called. Else, `0` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=174
lv=2
dt=Text
nm=LF_ProcessEditorEvent
mtime=3480188250
<article>
#_<markdown>
#_    int LF_ProcessEditorEvent (
#_        lua_State* L,
#_        int Event,
#_        void* Param)
#_
#_#### Parameters:
#_      L:       Lua state
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_
#_If Lua function [`export.ProcessEditorEvent`](110.html) exists, it is called. Else, `0` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=175
lv=2
dt=Text
nm=LF_ProcessEditorInput
mtime=3480188235
<article>
#_<markdown>
#_    int LF_ProcessEditorInput (
#_        lua_State* L,
#_        const INPUT_RECORD *Rec)
#_
#_#### Parameters:
#_      L:       Lua state
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_If Lua function [`export.ProcessEditorInput`](111.html) exists, it is called. Else, `0` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=176
lv=2
dt=Text
nm=LF_ProcessEvent
mtime=3480188078
<article>
#_<markdown>
#_    int LF_ProcessEvent(
#_        lua_State* L,
#_        HANDLE hPlugin,
#_        int Event,
#_        void *Param)
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_If Lua function [`export.ProcessEvent`](112.html) exists, it is called.
#_Else, `0` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=177
lv=2
dt=Text
nm=LF_ProcessHostFile
mtime=3480188093
<article>
#_<markdown>
#_    int LF_ProcessHostFile(
#_        lua_State* L,
#_        HANDLE hPlugin,
#_        PluginPanelItem *PanelItem,
#_        int ItemsNumber,
#_        int OpMode)
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_If Lua function [`export.ProcessHostFile`](113.html) exists,
#_it is called. Else, `FALSE` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=178
lv=2
dt=Text
nm=LF_ProcessKey
mtime=3480188114
<article>
#_<markdown>
#_    int LF_ProcessKey(
#_        lua_State* L,
#_        HANDLE hPlugin,
#_        int Key,
#_        unsigned int ControlState)
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_If Lua function [`export.ProcessKey`](114.html) exists, it is called.
#_Else, `FALSE` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=318
lv=2
dt=Text
nm=LF_ProcessSynchroEvent
ctime=3480185179
mtime=3480188583
<article>
#_<markdown>
#_    int LF_ProcessSynchroEvent (
#_        lua_State* L,
#_        int Event,
#_        void* Param)
#_
#_#### Parameters:
#_      L:       Lua state
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_
#_If Lua function [`export.ProcessSynchroEvent`](319.html) exists, it is called. Else, `0` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=179
lv=2
dt=Text
nm=LF_ProcessViewerEvent
mtime=3480188271
<article>
#_<markdown>
#_    int LF_ProcessViewerEvent (
#_        lua_State* L,
#_        int Event,
#_        void* Param)
#_
#_#### Parameters:
#_      L:       Lua state
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_
#_If Lua function [`export.ProcessViewerEvent`](127.html) exists, it is called. Else, `0` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=180
lv=2
dt=Text
nm=LF_PutFiles
mtime=3480188130
<article>
#_<markdown>
#_    int LF_PutFiles(
#_        lua_State* L,
#_        HANDLE hPlugin,
#_        PluginPanelItem *PanelItems,
#_        int ItemsNumber,
#_        int Move,
#_        int OpMode)
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_If Lua function [`export.PutFiles`](115.html) exists, it is called.
#_Else, `0` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=181
lv=2
dt=Text
nm=LF_SetDirectory
mtime=3480188144
<article>
#_<markdown>
#_    int LF_SetDirectory(
#_        lua_State* L,
#_        HANDLE hPlugin,
#_        const wchar_t *Dir,
#_        int OpMode)
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_If Lua function [`export.SetDirectory`](116.html) exists, it is called.
#_Else, `0` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=182
lv=2
dt=Text
nm=LF_SetFindList
mtime=3480188161
<article>
#_<markdown>
#_    int LF_SetFindList(
#_        lua_State* L,
#_        HANDLE hPlugin,
#_        const PluginPanelItem *PanelItems,
#_        int ItemsNumber)
#_
#_#### Parameters:
#_      L:       Lua state
#_      hPlugin: Plugin handle
#_      ....
#_
#_#### Returns:
#_      Value, according to FAR Plugins API.
#_
#_#### Description:
#_
#_If Lua function [`export.SetFindList`](117.html) exists, it is called.
#_Else, `FALSE` is returned.
#_
#_@@@
#_
</article>
</node>
<node>
id=184
lv=1
dt=Text
nm=Service functions
<article>
</article>
</node>
<node>
id=341
lv=2
dt=Text
nm=LF_Gsub
ctime=3481108972
mtime=3481109785
<article>
#_<markdown>
#_    const wchar_t *LF_Gsub (lua_State *L, const wchar_t *s,
#_                            const wchar_t *p, const wchar_t *r)
#_
#_#### Description:
#_
#_The function can be used as a replacement for `luaL_gsub`,
#_working with wide char parameters, otherwise identical.
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=340
lv=2
dt=Text
nm=LF_LoadFile
ctime=3481108964
mtime=3481109892
<article>
#_<markdown>
#_    int LF_LoadFile (lua_State *L, const wchar_t *filename)
#_
#_#### Description:
#_
#_The function can be used as a replacement for `luaL_loadfile`,
#_working with wide char *filename* parameter, otherwise identical.
#_
#_@@@
#_
#_
</article>
</node>
<node>
id=129
lv=2
dt=Text
nm=LF_LuaOpen
mtime=3866304389
<article>
#_<markdown>
#_    lua_State* LF_LuaOpen (PluginStartupInfo *Info, 
#_                           lua_CFunction OpenLibs)
#_
#_#### Parameters:
#_      Info:         Pointer to a static struct that must be already
#_                    initialized during SetStartupInfo call.
#_
#_      OpenLibs:     Pointer to a function that can open additional
#_                    libraries. (NULL is allowed.)
#_
#_#### Returns:
#_      Pointer to a newly created lua_State that already has some
#_      libraries opened (including standard Lua libraries, "far",
#_      "bit" and "utf8" libraries).
#_
#_#### Description:
#_
#_The function creates an instance of Lua interpreter, then calls
#_`LF_InitLuaState`.
#_
#_@@@
#_
</article>
</node>
<node>
id=155
lv=2
dt=Text
nm=LF_LuaClose
<article>
#_<markdown>
#_    void LF_LuaClose(lua_State* L)
#_
#_#### Parameters:
#_      L:  Lua state
#_
#_#### Returns:
#_      nothing
#_
#_#### Description:
#_
#_Releases the memory and closes the Lua state.
#_
#_@@@
#_
</article>
</node>
<node>
id=156
lv=2
dt=Text
nm=LF_Message
<article>
#_<markdown>
#_    int LF_Message(
#_        PluginStartupInfo *Info,
#_        const wchar_t *Msg,
#_        const wchar_t *Title,
#_        const wchar_t *Buttons,
#_        const char    *Flags,
#_        const wchar_t *HelpTopic)
#_
#_#### Parameters:
#_      Info:        Pointer to a static struct that must be already
#_                   initialized during SetStartupInfo call.
#_      Msg:         Message text; if multiline, then the lines must be
#_                   separated by '\n'
#_      Title:       Message box title
#_      Buttons:     Button captions; if multiple, then the captions
#_                   must be separated by ';'
#_      Flags:       A combination of the following characters:
#_                     'w' stands for FMSG_WARNING;
#_                     'e' stands for FMSG_ERRORTYPE;
#_                     'k' stands for FMSG_KEEPBACKGROUND;
#_                     'd' stands for FMSG_DOWN;
#_                     'l' stands for FMSG_LEFTALIGN;
#_      HelpTopic:   Help Topic (can be NULL)
#_
#_#### Returns:
#_      -1 if escape pressed, else - button number chosen (0 based).
#_
#_#### Description:
#_This is an alternative interface to the FAR function `Message`.
#_
#_@@@
#_
</article>
</node>
<node>
id=385
lv=2
dt=Text
nm=LF_InitOtherLuaState
ctime=3497514263
mtime=3866304231
<article>
#_<markdown>
#_    int LF_InitOtherLuaState (lua_State *L,
#_                              lua_State *Lplug,
#_                              lua_CFunction aOpenLibs) 
#_
#_#### Parameters:
#_      L:            Other Lua state.
#_
#_      Lplug:        Lua state of the LuaFAR plugin.
#_
#_      OpenLibs:     Pointer to a function that can open additional
#_                    libraries. (NULL is allowed.)
#_
#_#### Description:
#_
#_The function initializes **L** Lua state.
#_
#_1. Open the standard Lua libraries, `far`, `bit` and `utf8` libraries.
#_1. Call `aOpenLibs` function.
#_
#_@@@
#_
</article>
</node>
<node>
id=130
lv=2
dt=Text
nm=LF_RunDefaultScript
mtime=3501964398
<article>
#_<markdown>
#_    BOOL LF_RunDefaultScript(lua_State* L)
#_
#_#### Parameters:
#_      L:  Lua state
#_
#_#### Returns:
#_      TRUE if successful, FALSE otherwise
#_
#_#### Description:
#_
#_First, the function tries to `require` a module with the predefined name `<boot`. If `package.preload["<boot"]` contains a function, then it is run.
#_
#_Else, the starting (or "default") Lua script is searched in the plugin's directory, in the following order:
#_
#_1. The plugin name with the extension `.lua`, e.g.: `luaplug.dll -> luaplug.lua`
#_
#_2. If the plugin name contains a hyphen, then its part preceding the last hyphen is looked for, e.g.: `luaplug-x64.dll -> luaplug.lua`.
#_
#_This mechanism allows the default script to be either embedded into the application or external.
#_
#_@@@
#_
</article>
</node>
<node>
id=194
lv=0
dt=Text
nm=Third party software used
mtime=3851367970
<article>
#_<markdown>
#_The following third party software is used as part of LuaFAR:
#_
#_1. [Lua 5.1](196.html)
#_1. [Lua BitOp](197.html)
#_1. [LuaUtf8](251.html)
#_
#_Many thanks to the authors for making their great software available!
#_
#_
</article>
</node>
<node>
id=196
lv=1
dt=Text
nm=Lua
<article>
#_<markdown>
#_Lua is licensed under the terms of the MIT license reproduced below.
#_This means that Lua is free software and can be used for both academic
#_and commercial purposes at absolutely no cost.
#_
#_For details and rationale, see http://www.lua.org/license.html .
#_
#_<HR>
#_
#_Copyright (C) 1994-2008 Lua.org, PUC-Rio.
#_
#_Permission is hereby granted, free of charge, to any person obtaining a copy
#_of this software and associated documentation files (the "Software"), to deal
#_in the Software without restriction, including without limitation the rights
#_to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#_copies of the Software, and to permit persons to whom the Software is
#_furnished to do so, subject to the following conditions:
#_
#_The above copyright notice and this permission notice shall be included in
#_all copies or substantial portions of the Software.
#_
#_THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#_IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#_FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
#_AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#_LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#_OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#_THE SOFTWARE.
#_
#_
</article>
</node>
<node>
id=251
lv=1
dt=Text
nm=LuaUtf8
mtime=3851362213
<article>
#_Home page: https://github.com/starwing/luautf8
#_
#_MIT License
#_
#_Copyright (c) 2018 Xavier Wang
#_
#_Permission is hereby granted, free of charge, to any person obtaining a copy
#_of this software and associated documentation files (the "Software"), to deal
#_in the Software without restriction, including without limitation the rights
#_to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#_copies of the Software, and to permit persons to whom the Software is
#_furnished to do so, subject to the following conditions:
#_
#_The above copyright notice and this permission notice shall be included in all
#_copies or substantial portions of the Software.
#_
#_THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#_IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#_FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#_AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#_LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#_OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#_SOFTWARE.
#_
</article>
</node>
